
lab-1-427VIT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080049b4  080049b4  000149b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c54  08004c54  000201a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c5c  08004c5c  000201a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c60  08004c60  00014c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08004c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201a4  2**0
                  CONTENTS
 10 .bss          0000045c  200001a4  200001a4  000201a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000600  20000600  000201a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b0b4  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b80  00000000  00000000  0002b288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000810  00000000  00000000  0002ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  0002d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229db  00000000  00000000  0002dd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009fb0  00000000  00000000  00050773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0912  00000000  00000000  0005a723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012b035  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000027f4  00000000  00000000  0012b088  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001a4 	.word	0x200001a4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800499c 	.word	0x0800499c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001a8 	.word	0x200001a8
 80001ec:	0800499c 	.word	0x0800499c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
 80005d2:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <MX_GPIO_Init+0xf0>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	4a34      	ldr	r2, [pc, #208]	; (80006a8 <MX_GPIO_Init+0xf0>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	6313      	str	r3, [r2, #48]	; 0x30
 80005de:	4b32      	ldr	r3, [pc, #200]	; (80006a8 <MX_GPIO_Init+0xf0>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	613b      	str	r3, [r7, #16]
 80005e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <MX_GPIO_Init+0xf0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	4a2d      	ldr	r2, [pc, #180]	; (80006a8 <MX_GPIO_Init+0xf0>)
 80005f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005f8:	6313      	str	r3, [r2, #48]	; 0x30
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MX_GPIO_Init+0xf0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_GPIO_Init+0xf0>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <MX_GPIO_Init+0xf0>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_GPIO_Init+0xf0>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_GPIO_Init+0xf0>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4a1f      	ldr	r2, [pc, #124]	; (80006a8 <MX_GPIO_Init+0xf0>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_GPIO_Init+0xf0>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0301 	and.w	r3, r3, #1
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <MX_GPIO_Init+0xf0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <MX_GPIO_Init+0xf0>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_GPIO_Init+0xf0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0302 	and.w	r3, r3, #2
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <MX_GPIO_Init+0xf4>)
 8000662:	f001 fb5f 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	4619      	mov	r1, r3
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_GPIO_Init+0xf8>)
 800067c:	f001 f98e 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000680:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000684:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	2301      	movs	r3, #1
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <MX_GPIO_Init+0xf4>)
 800069a:	f001 f97f 	bl	800199c <HAL_GPIO_Init>

}
 800069e:	bf00      	nop
 80006a0:	3728      	adds	r7, #40	; 0x28
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	40020800 	.word	0x40020800

080006b4 <set_light>:
uint32_t button_click_time = 0;
uint32_t cur_mode_num = 0;
uint32_t initialized = 0;
uint32_t n_modes = 4;

void set_light(uint16_t pin, int value) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	6039      	str	r1, [r7, #0]
 80006be:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, pin, value > 0 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	bfcc      	ite	gt
 80006c6:	2301      	movgt	r3, #1
 80006c8:	2300      	movle	r3, #0
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	88fb      	ldrh	r3, [r7, #6]
 80006d0:	4619      	mov	r1, r3
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <set_light+0x2c>)
 80006d4:	f001 fb26 	bl	8001d24 <HAL_GPIO_WritePin>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40020c00 	.word	0x40020c00

080006e4 <set_red>:

void set_red(int value) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	set_light(RED_PIN, value);
 80006ec:	6879      	ldr	r1, [r7, #4]
 80006ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006f2:	f7ff ffdf 	bl	80006b4 <set_light>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <set_green>:

void set_green(int value) {
 80006fe:	b580      	push	{r7, lr}
 8000700:	b082      	sub	sp, #8
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
	set_light(GREEN_PIN, value);
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800070c:	f7ff ffd2 	bl	80006b4 <set_light>
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <set_yellow>:

void set_yellow(int value) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	set_light(YELLOW_PIN, value);
 8000720:	6879      	ldr	r1, [r7, #4]
 8000722:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000726:	f7ff ffc5 	bl	80006b4 <set_light>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <save_state>:

void save_state() {
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	exceeded_time = HAL_GetTick();
 8000738:	f000 ff5c 	bl	80015f4 <HAL_GetTick>
 800073c:	4603      	mov	r3, r0
 800073e:	4a07      	ldr	r2, [pc, #28]	; (800075c <save_state+0x28>)
 8000740:	6013      	str	r3, [r2, #0]
	saved_states[cur_mode_num].exceeded = exceeded_time - mode_start_time;
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <save_state+0x28>)
 8000744:	6819      	ldr	r1, [r3, #0]
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <save_state+0x2c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <save_state+0x30>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	1a8a      	subs	r2, r1, r2
 8000750:	4905      	ldr	r1, [pc, #20]	; (8000768 <save_state+0x34>)
 8000752:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000480 	.word	0x20000480
 8000760:	20000484 	.word	0x20000484
 8000764:	2000048c 	.word	0x2000048c
 8000768:	20000440 	.word	0x20000440

0800076c <next_mode>:


void next_mode() {
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
	cur_mode_num = (cur_mode_num + 1) % n_modes;
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <next_mode+0x3c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <next_mode+0x40>)
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	fbb3 f1f2 	udiv	r1, r3, r2
 800077e:	fb02 f201 	mul.w	r2, r2, r1
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <next_mode+0x3c>)
 8000786:	6013      	str	r3, [r2, #0]
	mode_start_time = exceeded_time - saved_states[cur_mode_num].exceeded;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <next_mode+0x44>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <next_mode+0x3c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4908      	ldr	r1, [pc, #32]	; (80007b4 <next_mode+0x48>)
 8000792:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8000796:	1ad3      	subs	r3, r2, r3
 8000798:	4a07      	ldr	r2, [pc, #28]	; (80007b8 <next_mode+0x4c>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	2000048c 	.word	0x2000048c
 80007ac:	20000128 	.word	0x20000128
 80007b0:	20000480 	.word	0x20000480
 80007b4:	20000440 	.word	0x20000440
 80007b8:	20000484 	.word	0x20000484

080007bc <apply_state>:

void apply_state() {
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
	struct ModeState state = MODES[cur_mode_num].states[saved_states[cur_mode_num].n_mode_state];
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <apply_state+0x48>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <apply_state+0x4c>)
 80007c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <apply_state+0x48>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	490e      	ldr	r1, [pc, #56]	; (800080c <apply_state+0x50>)
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	440b      	add	r3, r1
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	011b      	lsls	r3, r3, #4
 80007da:	4413      	add	r3, r2
 80007dc:	463c      	mov	r4, r7
 80007de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	set_red(state.R);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff7c 	bl	80006e4 <set_red>
	set_green(state.G);
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ff85 	bl	80006fe <set_green>
	set_yellow(state.Y);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff8e 	bl	8000718 <set_yellow>
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	bd90      	pop	{r4, r7, pc}
 8000804:	2000048c 	.word	0x2000048c
 8000808:	200000e0 	.word	0x200000e0
 800080c:	20000440 	.word	0x20000440

08000810 <apply_mode>:

void apply_mode() {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
	uint32_t n_state = saved_states[cur_mode_num].n_mode_state;
 8000816:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <apply_mode+0x84>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <apply_mode+0x88>)
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	4413      	add	r3, r2
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	607b      	str	r3, [r7, #4]
	if (saved_states[cur_mode_num].exceeded >  MODES[cur_mode_num].states[n_state].delay) {
 8000824:	4b1b      	ldr	r3, [pc, #108]	; (8000894 <apply_mode+0x84>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <apply_mode+0x88>)
 800082a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800082e:	4b19      	ldr	r3, [pc, #100]	; (8000894 <apply_mode+0x84>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	491a      	ldr	r1, [pc, #104]	; (800089c <apply_mode+0x8c>)
 8000834:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	440b      	add	r3, r1
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	429a      	cmp	r2, r3
 8000842:	d923      	bls.n	800088c <apply_mode+0x7c>
		saved_states[cur_mode_num].n_mode_state = (saved_states[cur_mode_num].n_mode_state + 1) % MODES[cur_mode_num].length;
 8000844:	4b13      	ldr	r3, [pc, #76]	; (8000894 <apply_mode+0x84>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <apply_mode+0x88>)
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	4413      	add	r3, r2
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <apply_mode+0x84>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4911      	ldr	r1, [pc, #68]	; (800089c <apply_mode+0x8c>)
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	490d      	ldr	r1, [pc, #52]	; (8000894 <apply_mode+0x84>)
 8000860:	6809      	ldr	r1, [r1, #0]
 8000862:	fbb2 f0f3 	udiv	r0, r2, r3
 8000866:	fb03 f300 	mul.w	r3, r3, r0
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	480a      	ldr	r0, [pc, #40]	; (8000898 <apply_mode+0x88>)
 800086e:	00cb      	lsls	r3, r1, #3
 8000870:	4403      	add	r3, r0
 8000872:	605a      	str	r2, [r3, #4]
		saved_states[cur_mode_num].exceeded = 0;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <apply_mode+0x84>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <apply_mode+0x88>)
 800087a:	2100      	movs	r1, #0
 800087c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		mode_start_time = exceeded_time;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <apply_mode+0x90>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <apply_mode+0x94>)
 8000886:	6013      	str	r3, [r2, #0]
		apply_state();
 8000888:	f7ff ff98 	bl	80007bc <apply_state>
	}
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000048c 	.word	0x2000048c
 8000898:	20000440 	.word	0x20000440
 800089c:	200000e0 	.word	0x200000e0
 80008a0:	20000480 	.word	0x20000480
 80008a4:	20000484 	.word	0x20000484

080008a8 <apply_button>:

void apply_button() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
	GPIO_PinState button_state = HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN);
 80008ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b2:	4817      	ldr	r0, [pc, #92]	; (8000910 <apply_button+0x68>)
 80008b4:	f001 fa1e 	bl	8001cf4 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	71fb      	strb	r3, [r7, #7]
	if (button_state == GPIO_PIN_SET) return;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d01d      	beq.n	80008fe <apply_button+0x56>
	HAL_Delay(BUTTON_DELAY);
 80008c2:	2005      	movs	r0, #5
 80008c4:	f000 fea2 	bl	800160c <HAL_Delay>
	button_state = HAL_GPIO_ReadPin(GPIOC, BUTTON_PIN);
 80008c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008cc:	4810      	ldr	r0, [pc, #64]	; (8000910 <apply_button+0x68>)
 80008ce:	f001 fa11 	bl	8001cf4 <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
	if (button_state == GPIO_PIN_SET) return;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d012      	beq.n	8000902 <apply_button+0x5a>
	if ((HAL_GetTick() - button_click_time) < BUTTON_INACTIVE_DELAY) return;
 80008dc:	f000 fe8a 	bl	80015f4 <HAL_GetTick>
 80008e0:	4602      	mov	r2, r0
 80008e2:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <apply_button+0x6c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1ad3      	subs	r3, r2, r3
 80008e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80008ec:	d30b      	bcc.n	8000906 <apply_button+0x5e>
	button_click_time = HAL_GetTick();
 80008ee:	f000 fe81 	bl	80015f4 <HAL_GetTick>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <apply_button+0x6c>)
 80008f6:	6013      	str	r3, [r2, #0]
	next_mode();
 80008f8:	f7ff ff38 	bl	800076c <next_mode>
 80008fc:	e004      	b.n	8000908 <apply_button+0x60>
	if (button_state == GPIO_PIN_SET) return;
 80008fe:	bf00      	nop
 8000900:	e002      	b.n	8000908 <apply_button+0x60>
	if (button_state == GPIO_PIN_SET) return;
 8000902:	bf00      	nop
 8000904:	e000      	b.n	8000908 <apply_button+0x60>
	if ((HAL_GetTick() - button_click_time) < BUTTON_INACTIVE_DELAY) return;
 8000906:	bf00      	nop
}
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40020800 	.word	0x40020800
 8000914:	20000488 	.word	0x20000488

08000918 <prepare_default_states>:

void prepare_default_states() {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	if (initialized > 0) return;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <prepare_default_states+0x30>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10f      	bne.n	8000944 <prepare_default_states+0x2c>
	exceeded_time = HAL_GetTick();
 8000924:	f000 fe66 	bl	80015f4 <HAL_GetTick>
 8000928:	4603      	mov	r3, r0
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <prepare_default_states+0x34>)
 800092c:	6013      	str	r3, [r2, #0]
	mode_start_time = HAL_GetTick();
 800092e:	f000 fe61 	bl	80015f4 <HAL_GetTick>
 8000932:	4603      	mov	r3, r0
 8000934:	4a06      	ldr	r2, [pc, #24]	; (8000950 <prepare_default_states+0x38>)
 8000936:	6013      	str	r3, [r2, #0]
	apply_state();
 8000938:	f7ff ff40 	bl	80007bc <apply_state>
	initialized = 1;
 800093c:	4b02      	ldr	r3, [pc, #8]	; (8000948 <prepare_default_states+0x30>)
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	e000      	b.n	8000946 <prepare_default_states+0x2e>
	if (initialized > 0) return;
 8000944:	bf00      	nop
}
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000490 	.word	0x20000490
 800094c:	20000480 	.word	0x20000480
 8000950:	20000484 	.word	0x20000484

08000954 <send_uart_message>:
static char 				cmd_buffer[CMD_BUFFER_SIZE];
static bool 				is_interrupt_enabled = false;
static uint32_t 			n_await_delays = 0;
static uint32_t 			n_next_mode = N_ADD_MODES_MIN;

static void send_uart_message(const char * content, uint32_t length) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
	if (is_interrupt_enabled) {
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <send_uart_message+0x50>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d012      	beq.n	800098c <send_uart_message+0x38>
		while (!is_transmitted);
 8000966:	bf00      	nop
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <send_uart_message+0x54>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	f083 0301 	eor.w	r3, r3, #1
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d1f8      	bne.n	8000968 <send_uart_message+0x14>

		is_transmitted = false;
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <send_uart_message+0x54>)
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart6, (void *) content, length);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b29b      	uxth	r3, r3
 8000980:	461a      	mov	r2, r3
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <send_uart_message+0x58>)
 8000986:	f001 ffb0 	bl	80028ea <HAL_UART_Transmit_IT>
	} else {
		HAL_UART_Transmit(&huart6, (void *) content, length, UART_TIMEOUT);
	}
}
 800098a:	e006      	b.n	800099a <send_uart_message+0x46>
		HAL_UART_Transmit(&huart6, (void *) content, length, UART_TIMEOUT);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b29a      	uxth	r2, r3
 8000990:	230a      	movs	r3, #10
 8000992:	6879      	ldr	r1, [r7, #4]
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <send_uart_message+0x58>)
 8000996:	f001 fe74 	bl	8002682 <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	20000597 	.word	0x20000597
 80009a8:	2000012c 	.word	0x2000012c
 80009ac:	200005a8 	.word	0x200005a8

080009b0 <send_cmd_msg>:

static inline void send_cmd_msg(const char * message) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	send_uart_message(message, strlen(message));
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff fc23 	bl	8000204 <strlen>
 80009be:	4603      	mov	r3, r0
 80009c0:	4619      	mov	r1, r3
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ffc6 	bl	8000954 <send_uart_message>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <send_cmd_newline>:

static void send_cmd_newline() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	send_uart_message(STR_NEWLINE, STR_NEWLINE_LEN);
 80009d4:	2104      	movs	r1, #4
 80009d6:	4802      	ldr	r0, [pc, #8]	; (80009e0 <send_cmd_newline+0x10>)
 80009d8:	f7ff ffbc 	bl	8000954 <send_uart_message>
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	080049b4 	.word	0x080049b4

080009e4 <send_cmd_msg_newline>:

static void send_cmd_msg_newline(const char * message) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	send_cmd_msg(message);
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ffdf 	bl	80009b0 <send_cmd_msg>
	send_cmd_newline();
 80009f2:	f7ff ffed 	bl	80009d0 <send_cmd_newline>
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <string_equals>:

static bool string_equals(const char * a, const char * b) {
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
	return strcmp(a, b) == 0;
 8000a08:	6839      	ldr	r1, [r7, #0]
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fbf0 	bl	80001f0 <strcmp>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf0c      	ite	eq
 8000a16:	2301      	moveq	r3, #1
 8000a18:	2300      	movne	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <starts_with>:

static bool starts_with(const char * prefix, const char * str) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	return strncmp(prefix, str, strlen(prefix)) == 0;
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff fbe8 	bl	8000204 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	461a      	mov	r2, r3
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f002 fef8 	bl	8003830 <strncmp>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	bf0c      	ite	eq
 8000a46:	2301      	moveq	r3, #1
 8000a48:	2300      	movne	r3, #0
 8000a4a:	b2db      	uxtb	r3, r3
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <normalize_cmd_buffer>:

static void normalize_cmd_buffer() {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
	uint32_t cmd_buffer_length = strlen(cmd_buffer);
 8000a5a:	4829      	ldr	r0, [pc, #164]	; (8000b00 <normalize_cmd_buffer+0xac>)
 8000a5c:	f7ff fbd2 	bl	8000204 <strlen>
 8000a60:	6038      	str	r0, [r7, #0]
	uint32_t j = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
	bool was_space_previous = true;
 8000a66:	2301      	movs	r3, #1
 8000a68:	72fb      	strb	r3, [r7, #11]
	for (uint32_t i = 0; i < cmd_buffer_length; ++i) {
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	e026      	b.n	8000abe <normalize_cmd_buffer+0x6a>
		if (isspace((unsigned char)cmd_buffer[i])) {
 8000a70:	4a23      	ldr	r2, [pc, #140]	; (8000b00 <normalize_cmd_buffer+0xac>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <normalize_cmd_buffer+0xb0>)
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00a      	beq.n	8000a9e <normalize_cmd_buffer+0x4a>
			if (was_space_previous) continue;
 8000a88:	7afb      	ldrb	r3, [r7, #11]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d113      	bne.n	8000ab6 <normalize_cmd_buffer+0x62>
			else {
				was_space_previous = true;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	72fb      	strb	r3, [r7, #11]
				cmd_buffer[i] = ' ';
 8000a92:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <normalize_cmd_buffer+0xac>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4413      	add	r3, r2
 8000a98:	2220      	movs	r2, #32
 8000a9a:	701a      	strb	r2, [r3, #0]
 8000a9c:	e001      	b.n	8000aa2 <normalize_cmd_buffer+0x4e>
			}
		} else {
			was_space_previous = false;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	72fb      	strb	r3, [r7, #11]
		}
		cmd_buffer[j++] = cmd_buffer[i];
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1c5a      	adds	r2, r3, #1
 8000aa6:	60fa      	str	r2, [r7, #12]
 8000aa8:	4915      	ldr	r1, [pc, #84]	; (8000b00 <normalize_cmd_buffer+0xac>)
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	440a      	add	r2, r1
 8000aae:	7811      	ldrb	r1, [r2, #0]
 8000ab0:	4a13      	ldr	r2, [pc, #76]	; (8000b00 <normalize_cmd_buffer+0xac>)
 8000ab2:	54d1      	strb	r1, [r2, r3]
 8000ab4:	e000      	b.n	8000ab8 <normalize_cmd_buffer+0x64>
			if (was_space_previous) continue;
 8000ab6:	bf00      	nop
	for (uint32_t i = 0; i < cmd_buffer_length; ++i) {
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3301      	adds	r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d3d4      	bcc.n	8000a70 <normalize_cmd_buffer+0x1c>
	}

	if (was_space_previous) while (isspace((unsigned char) cmd_buffer[j - 1])) --j;
 8000ac6:	7afb      	ldrb	r3, [r7, #11]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00f      	beq.n	8000aec <normalize_cmd_buffer+0x98>
 8000acc:	e002      	b.n	8000ad4 <normalize_cmd_buffer+0x80>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	4a09      	ldr	r2, [pc, #36]	; (8000b00 <normalize_cmd_buffer+0xac>)
 8000ada:	5cd3      	ldrb	r3, [r2, r3]
 8000adc:	3301      	adds	r3, #1
 8000ade:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <normalize_cmd_buffer+0xb0>)
 8000ae0:	4413      	add	r3, r2
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d1f0      	bne.n	8000ace <normalize_cmd_buffer+0x7a>
	cmd_buffer[j] = CHAR_EOF;
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <normalize_cmd_buffer+0xac>)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000498 	.word	0x20000498
 8000b04:	08004aa4 	.word	0x08004aa4

08000b08 <parse_cmd>:

static int parse_cmd() {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	if (strlen(cmd_buffer) == 0) return CMD_NOT_FOUND;
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <parse_cmd+0x6c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <parse_cmd+0x10>
 8000b14:	2300      	movs	r3, #0
 8000b16:	e02a      	b.n	8000b6e <parse_cmd+0x66>
	if (n_await_delays) return CMD_CREATE_DELAY;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <parse_cmd+0x70>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <parse_cmd+0x1c>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e024      	b.n	8000b6e <parse_cmd+0x66>
	if (string_equals(STR_CMD_INT_ON, cmd_buffer)) return CMD_INT_ON;
 8000b24:	4913      	ldr	r1, [pc, #76]	; (8000b74 <parse_cmd+0x6c>)
 8000b26:	4815      	ldr	r0, [pc, #84]	; (8000b7c <parse_cmd+0x74>)
 8000b28:	f7ff ff69 	bl	80009fe <string_equals>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <parse_cmd+0x2e>
 8000b32:	2301      	movs	r3, #1
 8000b34:	e01b      	b.n	8000b6e <parse_cmd+0x66>
	if (string_equals(STR_CMD_INT_OFF, cmd_buffer)) return CMD_INT_OFF;
 8000b36:	490f      	ldr	r1, [pc, #60]	; (8000b74 <parse_cmd+0x6c>)
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <parse_cmd+0x78>)
 8000b3a:	f7ff ff60 	bl	80009fe <string_equals>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <parse_cmd+0x40>
 8000b44:	2302      	movs	r3, #2
 8000b46:	e012      	b.n	8000b6e <parse_cmd+0x66>
	if (starts_with(STR_CMD_SET_START, cmd_buffer)) return CMD_SET;
 8000b48:	490a      	ldr	r1, [pc, #40]	; (8000b74 <parse_cmd+0x6c>)
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <parse_cmd+0x7c>)
 8000b4c:	f7ff ff6a 	bl	8000a24 <starts_with>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <parse_cmd+0x52>
 8000b56:	2306      	movs	r3, #6
 8000b58:	e009      	b.n	8000b6e <parse_cmd+0x66>
	if (starts_with(STR_CMD_CREATE_START, cmd_buffer)) return CMD_CREATE;
 8000b5a:	4906      	ldr	r1, [pc, #24]	; (8000b74 <parse_cmd+0x6c>)
 8000b5c:	480a      	ldr	r0, [pc, #40]	; (8000b88 <parse_cmd+0x80>)
 8000b5e:	f7ff ff61 	bl	8000a24 <starts_with>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <parse_cmd+0x64>
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <parse_cmd+0x66>
	return CMD_NOT_FOUND;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000498 	.word	0x20000498
 8000b78:	20000598 	.word	0x20000598
 8000b7c:	080049bc 	.word	0x080049bc
 8000b80:	080049d0 	.word	0x080049d0
 8000b84:	080049e4 	.word	0x080049e4
 8000b88:	080049ec 	.word	0x080049ec

08000b8c <handle_int_on_command>:

static bool handle_int_on_command() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	send_cmd_msg_newline(STR_INT_ENABLED);
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <handle_int_on_command+0x18>)
 8000b92:	f7ff ff27 	bl	80009e4 <send_cmd_msg_newline>
	is_interrupt_enabled = true;
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <handle_int_on_command+0x1c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
	return true;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	080049f4 	.word	0x080049f4
 8000ba8:	20000597 	.word	0x20000597

08000bac <handle_int_off_command>:

static bool handle_int_off_command() {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	send_cmd_msg_newline(STR_INT_DISABLED);
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <handle_int_off_command+0x18>)
 8000bb2:	f7ff ff17 	bl	80009e4 <send_cmd_msg_newline>
	is_interrupt_enabled = true;
 8000bb6:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <handle_int_off_command+0x1c>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	701a      	strb	r2, [r3, #0]
	return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08004a0c 	.word	0x08004a0c
 8000bc8:	20000597 	.word	0x20000597

08000bcc <handle_set_command>:

static bool handle_set_command() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
	const char * const i_mode_buffer = cmd_buffer + STR_CMD_SET_START_LEN;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <handle_set_command+0x48>)
 8000bd4:	607b      	str	r3, [r7, #4]
	uint32_t i_mode;
	if (sscanf(i_mode_buffer, "%lu", &i_mode) != 1) return false;
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	461a      	mov	r2, r3
 8000bda:	490f      	ldr	r1, [pc, #60]	; (8000c18 <handle_set_command+0x4c>)
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f002 fdf9 	bl	80037d4 <siscanf>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d001      	beq.n	8000bec <handle_set_command+0x20>
 8000be8:	2300      	movs	r3, #0
 8000bea:	e00e      	b.n	8000c0a <handle_set_command+0x3e>
	if (i_mode < 1 || i_mode > n_modes) return false;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d004      	beq.n	8000bfc <handle_set_command+0x30>
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <handle_set_command+0x50>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d901      	bls.n	8000c00 <handle_set_command+0x34>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	e004      	b.n	8000c0a <handle_set_command+0x3e>
	cur_mode_num = i_mode - 1;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <handle_set_command+0x54>)
 8000c06:	6013      	str	r3, [r2, #0]
	return true;
 8000c08:	2301      	movs	r3, #1
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000049c 	.word	0x2000049c
 8000c18:	08004a24 	.word	0x08004a24
 8000c1c:	20000128 	.word	0x20000128
 8000c20:	2000048c 	.word	0x2000048c

08000c24 <create_mode_state_from_char>:

static struct ModeState create_mode_state_from_char(char mode_char) {
 8000c24:	b490      	push	{r4, r7}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	70fb      	strb	r3, [r7, #3]
	struct ModeState mode_state = {.R = 0, .G = 0, .Y = 0, .delay = 0};
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
	switch (mode_char) {
 8000c3e:	78fb      	ldrb	r3, [r7, #3]
 8000c40:	3b67      	subs	r3, #103	; 0x67
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d831      	bhi.n	8000caa <create_mode_state_from_char+0x86>
 8000c46:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <create_mode_state_from_char+0x28>)
 8000c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4c:	08000c9f 	.word	0x08000c9f
 8000c50:	08000cab 	.word	0x08000cab
 8000c54:	08000cab 	.word	0x08000cab
 8000c58:	08000cab 	.word	0x08000cab
 8000c5c:	08000cab 	.word	0x08000cab
 8000c60:	08000cab 	.word	0x08000cab
 8000c64:	08000cab 	.word	0x08000cab
 8000c68:	08000cab 	.word	0x08000cab
 8000c6c:	08000cab 	.word	0x08000cab
 8000c70:	08000cab 	.word	0x08000cab
 8000c74:	08000cab 	.word	0x08000cab
 8000c78:	08000c99 	.word	0x08000c99
 8000c7c:	08000cab 	.word	0x08000cab
 8000c80:	08000cab 	.word	0x08000cab
 8000c84:	08000cab 	.word	0x08000cab
 8000c88:	08000cab 	.word	0x08000cab
 8000c8c:	08000cab 	.word	0x08000cab
 8000c90:	08000cab 	.word	0x08000cab
 8000c94:	08000ca5 	.word	0x08000ca5
		case MODE_CHAR_EMPTY: break;
		case MODE_CHAR_RED:
			mode_state.R = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
			break;
 8000c9c:	e005      	b.n	8000caa <create_mode_state_from_char+0x86>
		case MODE_CHAR_GREEN:
			mode_state.G = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	613b      	str	r3, [r7, #16]
			break;
 8000ca2:	e002      	b.n	8000caa <create_mode_state_from_char+0x86>
		case MODE_CHAR_YELLOW:
			mode_state.Y = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
			break;
 8000ca8:	bf00      	nop
	}
	return mode_state;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	461c      	mov	r4, r3
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cb4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bc90      	pop	{r4, r7}
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <handle_create_command>:

static bool handle_create_command() {
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
	const char * const pattern = cmd_buffer + STR_CMD_NEW_START_LEN;
 8000cca:	4b35      	ldr	r3, [pc, #212]	; (8000da0 <handle_create_command+0xdc>)
 8000ccc:	61bb      	str	r3, [r7, #24]
	const uint32_t n_states = strlen(pattern);
 8000cce:	69b8      	ldr	r0, [r7, #24]
 8000cd0:	f7ff fa98 	bl	8000204 <strlen>
 8000cd4:	6178      	str	r0, [r7, #20]
	if (n_states < MODE_N_STATES_MIN || n_states > MODE_N_STATES_MAX) return false;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d902      	bls.n	8000ce2 <handle_create_command+0x1e>
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d901      	bls.n	8000ce6 <handle_create_command+0x22>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e057      	b.n	8000d96 <handle_create_command+0xd2>
	for (uint8_t i = 0; i < n_states; ++i) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	77fb      	strb	r3, [r7, #31]
 8000cea:	e046      	b.n	8000d7a <handle_create_command+0xb6>
		switch (pattern[i]) {
 8000cec:	7ffb      	ldrb	r3, [r7, #31]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	3b67      	subs	r3, #103	; 0x67
 8000cf6:	2b12      	cmp	r3, #18
 8000cf8:	d83a      	bhi.n	8000d70 <handle_create_command+0xac>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <handle_create_command+0x3c>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d4d 	.word	0x08000d4d
 8000d04:	08000d71 	.word	0x08000d71
 8000d08:	08000d71 	.word	0x08000d71
 8000d0c:	08000d71 	.word	0x08000d71
 8000d10:	08000d71 	.word	0x08000d71
 8000d14:	08000d71 	.word	0x08000d71
 8000d18:	08000d71 	.word	0x08000d71
 8000d1c:	08000d4d 	.word	0x08000d4d
 8000d20:	08000d71 	.word	0x08000d71
 8000d24:	08000d71 	.word	0x08000d71
 8000d28:	08000d71 	.word	0x08000d71
 8000d2c:	08000d4d 	.word	0x08000d4d
 8000d30:	08000d71 	.word	0x08000d71
 8000d34:	08000d71 	.word	0x08000d71
 8000d38:	08000d71 	.word	0x08000d71
 8000d3c:	08000d71 	.word	0x08000d71
 8000d40:	08000d71 	.word	0x08000d71
 8000d44:	08000d71 	.word	0x08000d71
 8000d48:	08000d4d 	.word	0x08000d4d
			case MODE_CHAR_EMPTY:
			case MODE_CHAR_RED:
			case MODE_CHAR_GREEN:
			case MODE_CHAR_YELLOW:
				created_mode.states[i] = create_mode_state_from_char(pattern[i]);
 8000d4c:	7ffb      	ldrb	r3, [r7, #31]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4413      	add	r3, r2
 8000d52:	7819      	ldrb	r1, [r3, #0]
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <handle_create_command+0xe0>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	7ffb      	ldrb	r3, [r7, #31]
 8000d5a:	011b      	lsls	r3, r3, #4
 8000d5c:	18d4      	adds	r4, r2, r3
 8000d5e:	463b      	mov	r3, r7
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ff5f 	bl	8000c24 <create_mode_state_from_char>
 8000d66:	463b      	mov	r3, r7
 8000d68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				break;
 8000d6e:	e001      	b.n	8000d74 <handle_create_command+0xb0>
			default:
				return false;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e010      	b.n	8000d96 <handle_create_command+0xd2>
	for (uint8_t i = 0; i < n_states; ++i) {
 8000d74:	7ffb      	ldrb	r3, [r7, #31]
 8000d76:	3301      	adds	r3, #1
 8000d78:	77fb      	strb	r3, [r7, #31]
 8000d7a:	7ffb      	ldrb	r3, [r7, #31]
 8000d7c:	697a      	ldr	r2, [r7, #20]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d8b4      	bhi.n	8000cec <handle_create_command+0x28>
		}
	}
	n_await_delays = n_states;
 8000d82:	4a09      	ldr	r2, [pc, #36]	; (8000da8 <handle_create_command+0xe4>)
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	6013      	str	r3, [r2, #0]
	created_mode.length = n_states;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <handle_create_command+0xe0>)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	6053      	str	r3, [r2, #4]
	send_cmd_msg_newline("Please enter delays");
 8000d8e:	4807      	ldr	r0, [pc, #28]	; (8000dac <handle_create_command+0xe8>)
 8000d90:	f7ff fe28 	bl	80009e4 <send_cmd_msg_newline>
	return true;
 8000d94:	2301      	movs	r3, #1
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	; 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd90      	pop	{r4, r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	2000049c 	.word	0x2000049c
 8000da4:	20000120 	.word	0x20000120
 8000da8:	20000598 	.word	0x20000598
 8000dac:	08004a28 	.word	0x08004a28

08000db0 <copy_created_mode_to>:

static void copy_created_mode_to(uint8_t i_mode) {
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	MODES[i_mode].length = created_mode.length;
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	4a27      	ldr	r2, [pc, #156]	; (8000e5c <copy_created_mode_to+0xac>)
 8000dbe:	6852      	ldr	r2, [r2, #4]
 8000dc0:	4927      	ldr	r1, [pc, #156]	; (8000e60 <copy_created_mode_to+0xb0>)
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	605a      	str	r2, [r3, #4]
	for (uint8_t i_state = 0; i_state < created_mode.length; ++i_state) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e03a      	b.n	8000e44 <copy_created_mode_to+0x94>
		MODES[i_mode].states[i_state].R = created_mode.states[i_state].R;
 8000dce:	4b23      	ldr	r3, [pc, #140]	; (8000e5c <copy_created_mode_to+0xac>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
 8000dd4:	011b      	lsls	r3, r3, #4
 8000dd6:	441a      	add	r2, r3
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4921      	ldr	r1, [pc, #132]	; (8000e60 <copy_created_mode_to+0xb0>)
 8000ddc:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	011b      	lsls	r3, r3, #4
 8000de4:	440b      	add	r3, r1
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	601a      	str	r2, [r3, #0]
		MODES[i_mode].states[i_state].G = created_mode.states[i_state].G;
 8000dea:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <copy_created_mode_to+0xac>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	441a      	add	r2, r3
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	491a      	ldr	r1, [pc, #104]	; (8000e60 <copy_created_mode_to+0xb0>)
 8000df8:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	440b      	add	r3, r1
 8000e02:	6892      	ldr	r2, [r2, #8]
 8000e04:	609a      	str	r2, [r3, #8]
		MODES[i_mode].states[i_state].Y = created_mode.states[i_state].Y;
 8000e06:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <copy_created_mode_to+0xac>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	441a      	add	r2, r3
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4913      	ldr	r1, [pc, #76]	; (8000e60 <copy_created_mode_to+0xb0>)
 8000e14:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
 8000e1a:	011b      	lsls	r3, r3, #4
 8000e1c:	440b      	add	r3, r1
 8000e1e:	6852      	ldr	r2, [r2, #4]
 8000e20:	605a      	str	r2, [r3, #4]
		MODES[i_mode].states[i_state].delay = created_mode.states[i_state].delay;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <copy_created_mode_to+0xac>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	011b      	lsls	r3, r3, #4
 8000e2a:	441a      	add	r2, r3
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	490c      	ldr	r1, [pc, #48]	; (8000e60 <copy_created_mode_to+0xb0>)
 8000e30:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	440b      	add	r3, r1
 8000e3a:	68d2      	ldr	r2, [r2, #12]
 8000e3c:	60da      	str	r2, [r3, #12]
	for (uint8_t i_state = 0; i_state < created_mode.length; ++i_state) {
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	3301      	adds	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	7bfa      	ldrb	r2, [r7, #15]
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <copy_created_mode_to+0xac>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3bf      	bcc.n	8000dce <copy_created_mode_to+0x1e>
	}
}
 8000e4e:	bf00      	nop
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	20000120 	.word	0x20000120
 8000e60:	200000e0 	.word	0x200000e0

08000e64 <handle_create_command_delay>:

static bool handle_create_command_delay() {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b0c2      	sub	sp, #264	; 0x108
 8000e68:	af00      	add	r7, sp, #0
	const uint8_t i_state = created_mode.length - n_await_delays;
 8000e6a:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <handle_create_command_delay+0xe4>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b36      	ldr	r3, [pc, #216]	; (8000f4c <handle_create_command_delay+0xe8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	if (sscanf(cmd_buffer, "%lu", &(created_mode.states[i_state].delay)) != 1) return false;
 8000e7c:	4b32      	ldr	r3, [pc, #200]	; (8000f48 <handle_create_command_delay+0xe4>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8000e84:	011b      	lsls	r3, r3, #4
 8000e86:	4413      	add	r3, r2
 8000e88:	330c      	adds	r3, #12
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4930      	ldr	r1, [pc, #192]	; (8000f50 <handle_create_command_delay+0xec>)
 8000e8e:	4831      	ldr	r0, [pc, #196]	; (8000f54 <handle_create_command_delay+0xf0>)
 8000e90:	f002 fca0 	bl	80037d4 <siscanf>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d001      	beq.n	8000e9e <handle_create_command_delay+0x3a>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e04e      	b.n	8000f3c <handle_create_command_delay+0xd8>
	char buffer[256];
	n_await_delays--;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <handle_create_command_delay+0xe8>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	4a29      	ldr	r2, [pc, #164]	; (8000f4c <handle_create_command_delay+0xe8>)
 8000ea6:	6013      	str	r3, [r2, #0]
	if (n_await_delays == 0) {
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <handle_create_command_delay+0xe8>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d132      	bne.n	8000f16 <handle_create_command_delay+0xb2>
		if (n_next_mode > N_ADD_MODES_MAX) n_next_mode = N_ADD_MODES_MIN;
 8000eb0:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <handle_create_command_delay+0xf4>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2b07      	cmp	r3, #7
 8000eb6:	d902      	bls.n	8000ebe <handle_create_command_delay+0x5a>
 8000eb8:	4b27      	ldr	r3, [pc, #156]	; (8000f58 <handle_create_command_delay+0xf4>)
 8000eba:	2204      	movs	r2, #4
 8000ebc:	601a      	str	r2, [r3, #0]
		const uint8_t i_mode = n_next_mode;
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <handle_create_command_delay+0xf4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		//memcpy(MODES + i_mode, &(created_mode), sizeof(created_mode));
		copy_created_mode_to(i_mode);
 8000ec6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff70 	bl	8000db0 <copy_created_mode_to>
		if (n_modes < (N_ADD_MODES_MAX + 1)) n_modes++;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <handle_create_command_delay+0xf8>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d804      	bhi.n	8000ee2 <handle_create_command_delay+0x7e>
 8000ed8:	4b20      	ldr	r3, [pc, #128]	; (8000f5c <handle_create_command_delay+0xf8>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a1f      	ldr	r2, [pc, #124]	; (8000f5c <handle_create_command_delay+0xf8>)
 8000ee0:	6013      	str	r3, [r2, #0]
		n_next_mode++;
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	; (8000f58 <handle_create_command_delay+0xf4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <handle_create_command_delay+0xf4>)
 8000eea:	6013      	str	r3, [r2, #0]
		memset(buffer, CHAR_EOF, sizeof(buffer));
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 fc45 	bl	8003784 <memset>
		sprintf(buffer, "Written in mode  %d", i_mode + 1);
 8000efa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4917      	ldr	r1, [pc, #92]	; (8000f60 <handle_create_command_delay+0xfc>)
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fc45 	bl	8003794 <siprintf>
		send_cmd_msg_newline(buffer);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fd69 	bl	80009e4 <send_cmd_msg_newline>
		return true;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e012      	b.n	8000f3c <handle_create_command_delay+0xd8>
	}
	memset(buffer, CHAR_EOF, sizeof(buffer));
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f002 fc30 	bl	8003784 <memset>
	sprintf(buffer, "%lu delays remaining (ms):", n_await_delays);
 8000f24:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <handle_create_command_delay+0xe8>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <handle_create_command_delay+0x100>)
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fc31 	bl	8003794 <siprintf>
	send_cmd_msg_newline(buffer);
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff fd55 	bl	80009e4 <send_cmd_msg_newline>
	return true;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000120 	.word	0x20000120
 8000f4c:	20000598 	.word	0x20000598
 8000f50:	08004a24 	.word	0x08004a24
 8000f54:	20000498 	.word	0x20000498
 8000f58:	20000130 	.word	0x20000130
 8000f5c:	20000128 	.word	0x20000128
 8000f60:	08004a3c 	.word	0x08004a3c
 8000f64:	08004a50 	.word	0x08004a50

08000f68 <handle_command_not_found>:

static bool handle_command_not_found() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	send_cmd_msg_newline(STR_INVALID_CMD);
 8000f6c:	4802      	ldr	r0, [pc, #8]	; (8000f78 <handle_command_not_found+0x10>)
 8000f6e:	f7ff fd39 	bl	80009e4 <send_cmd_msg_newline>
	return true;
 8000f72:	2301      	movs	r3, #1
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	08004a6c 	.word	0x08004a6c

08000f7c <handle_cmd_command>:

static bool handle_cmd_command() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	normalize_cmd_buffer();
 8000f82:	f7ff fd67 	bl	8000a54 <normalize_cmd_buffer>
	uint32_t cmd_code = parse_cmd(cmd_buffer);
 8000f86:	4821      	ldr	r0, [pc, #132]	; (800100c <handle_cmd_command+0x90>)
 8000f88:	f7ff fdbe 	bl	8000b08 <parse_cmd>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d831      	bhi.n	8000ffa <handle_cmd_command+0x7e>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <handle_cmd_command+0x20>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fb9 	.word	0x08000fb9
 8000fa0:	08000fc1 	.word	0x08000fc1
 8000fa4:	08000fc9 	.word	0x08000fc9
 8000fa8:	08000fdf 	.word	0x08000fdf
 8000fac:	08000fd1 	.word	0x08000fd1
 8000fb0:	08000ffb 	.word	0x08000ffb
 8000fb4:	08000fed 	.word	0x08000fed
	switch (cmd_code) {
		case CMD_NOT_FOUND: return handle_command_not_found();
 8000fb8:	f7ff ffd6 	bl	8000f68 <handle_command_not_found>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	e020      	b.n	8001002 <handle_cmd_command+0x86>
		case CMD_INT_ON: return handle_int_on_command();
 8000fc0:	f7ff fde4 	bl	8000b8c <handle_int_on_command>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	e01c      	b.n	8001002 <handle_cmd_command+0x86>
		case CMD_INT_OFF: return handle_int_off_command();
 8000fc8:	f7ff fdf0 	bl	8000bac <handle_int_off_command>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	e018      	b.n	8001002 <handle_cmd_command+0x86>
		case CMD_CREATE_DELAY: if(handle_create_command_delay()) return true;
 8000fd0:	f7ff ff48 	bl	8000e64 <handle_create_command_delay>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <handle_cmd_command+0x62>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e011      	b.n	8001002 <handle_cmd_command+0x86>
		case CMD_CREATE: if(handle_create_command()) return true;
 8000fde:	f7ff fe71 	bl	8000cc4 <handle_create_command>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <handle_cmd_command+0x70>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e00a      	b.n	8001002 <handle_cmd_command+0x86>
		case CMD_SET: if(handle_set_command()) return true;
 8000fec:	f7ff fdee 	bl	8000bcc <handle_set_command>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <handle_cmd_command+0x7e>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e003      	b.n	8001002 <handle_cmd_command+0x86>
	}
	send_cmd_msg_newline(STR_INVALID_CMD);
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <handle_cmd_command+0x94>)
 8000ffc:	f7ff fcf2 	bl	80009e4 <send_cmd_msg_newline>
	return true;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000498 	.word	0x20000498
 8001010:	08004a6c 	.word	0x08004a6c

08001014 <reset_cmd_buffer>:

static void reset_cmd_buffer() {
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	memset(cmd_buffer, CHAR_EOF, sizeof(cmd_buffer));
 8001018:	22ff      	movs	r2, #255	; 0xff
 800101a:	2100      	movs	r1, #0
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <reset_cmd_buffer+0x14>)
 800101e:	f002 fbb1 	bl	8003784 <memset>
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000498 	.word	0x20000498

0800102c <handle_cmd_overflow>:

static void handle_cmd_overflow() {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	const uint32_t cmd_buffer_length = strlen(cmd_buffer);
 8001032:	4808      	ldr	r0, [pc, #32]	; (8001054 <handle_cmd_overflow+0x28>)
 8001034:	f7ff f8e6 	bl	8000204 <strlen>
 8001038:	6078      	str	r0, [r7, #4]
	if (cmd_buffer_length < sizeof(cmd_buffer) - 1) return;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2bfd      	cmp	r3, #253	; 0xfd
 800103e:	d905      	bls.n	800104c <handle_cmd_overflow+0x20>
	send_cmd_msg_newline(STR_INVALID_CMD);
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <handle_cmd_overflow+0x2c>)
 8001042:	f7ff fccf 	bl	80009e4 <send_cmd_msg_newline>
	reset_cmd_buffer();
 8001046:	f7ff ffe5 	bl	8001014 <reset_cmd_buffer>
 800104a:	e000      	b.n	800104e <handle_cmd_overflow+0x22>
	if (cmd_buffer_length < sizeof(cmd_buffer) - 1) return;
 800104c:	bf00      	nop
}
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000498 	.word	0x20000498
 8001058:	08004a6c 	.word	0x08004a6c

0800105c <append_recieved_char>:

static void append_recieved_char() {
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	const uint32_t cmd_buffer_length = strlen(cmd_buffer);
 8001062:	4807      	ldr	r0, [pc, #28]	; (8001080 <append_recieved_char+0x24>)
 8001064:	f7ff f8ce 	bl	8000204 <strlen>
 8001068:	6078      	str	r0, [r7, #4]
	cmd_buffer[cmd_buffer_length] = received_char;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <append_recieved_char+0x28>)
 800106c:	7819      	ldrb	r1, [r3, #0]
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <append_recieved_char+0x24>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	460a      	mov	r2, r1
 8001076:	701a      	strb	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000498 	.word	0x20000498
 8001084:	20000494 	.word	0x20000494

08001088 <handle_uart>:


static void handle_uart() {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
    if (is_interrupt_enabled) {
 800108e:	4b29      	ldr	r3, [pc, #164]	; (8001134 <handle_uart+0xac>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00c      	beq.n	80010b0 <handle_uart+0x28>
        if (!is_char_received) {
 8001096:	4b28      	ldr	r3, [pc, #160]	; (8001138 <handle_uart+0xb0>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	f083 0301 	eor.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d015      	beq.n	80010d0 <handle_uart+0x48>
            HAL_UART_Receive_IT(&huart6, (void *) &received_char, sizeof(received_char));
 80010a4:	2201      	movs	r2, #1
 80010a6:	4925      	ldr	r1, [pc, #148]	; (800113c <handle_uart+0xb4>)
 80010a8:	4825      	ldr	r0, [pc, #148]	; (8001140 <handle_uart+0xb8>)
 80010aa:	f001 fc63 	bl	8002974 <HAL_UART_Receive_IT>
            return;
 80010ae:	e03e      	b.n	800112e <handle_uart+0xa6>
        }
    } else {
        switch (HAL_UART_Receive(&huart6, (void *) &received_char, sizeof(received_char), UART_TIMEOUT)) {
 80010b0:	230a      	movs	r3, #10
 80010b2:	2201      	movs	r2, #1
 80010b4:	4921      	ldr	r1, [pc, #132]	; (800113c <handle_uart+0xb4>)
 80010b6:	4822      	ldr	r0, [pc, #136]	; (8001140 <handle_uart+0xb8>)
 80010b8:	f001 fb75 	bl	80027a6 <HAL_UART_Receive>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <handle_uart+0x46>
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db04      	blt.n	80010d0 <handle_uart+0x48>
 80010c6:	3b01      	subs	r3, #1
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d801      	bhi.n	80010d0 <handle_uart+0x48>
                break;

            case HAL_ERROR:
            case HAL_BUSY:
            case HAL_TIMEOUT:
                return;
 80010cc:	e02f      	b.n	800112e <handle_uart+0xa6>
                break;
 80010ce:	bf00      	nop
        }
    }

	is_char_received = false;
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <handle_uart+0xb0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
    send_uart_message(&received_char, 1); //echo
 80010d6:	2101      	movs	r1, #1
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <handle_uart+0xb4>)
 80010da:	f7ff fc3b 	bl	8000954 <send_uart_message>

    switch (received_char) {
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <handle_uart+0xb4>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b7f      	cmp	r3, #127	; 0x7f
 80010e4:	d006      	beq.n	80010f4 <handle_uart+0x6c>
 80010e6:	2b7f      	cmp	r3, #127	; 0x7f
 80010e8:	dc1b      	bgt.n	8001122 <handle_uart+0x9a>
 80010ea:	2b08      	cmp	r3, #8
 80010ec:	d002      	beq.n	80010f4 <handle_uart+0x6c>
 80010ee:	2b0d      	cmp	r3, #13
 80010f0:	d00d      	beq.n	800110e <handle_uart+0x86>
 80010f2:	e016      	b.n	8001122 <handle_uart+0x9a>
    	case CHAR_BACKSPACE:
    	case CHAR_BITEND: {
    	    const uint32_t cmd_buffer_length = strlen(cmd_buffer);
 80010f4:	4813      	ldr	r0, [pc, #76]	; (8001144 <handle_uart+0xbc>)
 80010f6:	f7ff f885 	bl	8000204 <strlen>
 80010fa:	6078      	str	r0, [r7, #4]
    	    if (cmd_buffer_length > 0) cmd_buffer[cmd_buffer_length - 1] = CHAR_EOF;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d014      	beq.n	800112c <handle_uart+0xa4>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3b01      	subs	r3, #1
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <handle_uart+0xbc>)
 8001108:	2100      	movs	r1, #0
 800110a:	54d1      	strb	r1, [r2, r3]
    		return;
 800110c:	e00e      	b.n	800112c <handle_uart+0xa4>
    	}
    	case CHAR_RET: {
    		send_cmd_newline();
 800110e:	f7ff fc5f 	bl	80009d0 <send_cmd_newline>
    		handle_cmd_command();
 8001112:	f7ff ff33 	bl	8000f7c <handle_cmd_command>
        	memset(cmd_buffer, CHAR_EOF, sizeof(cmd_buffer));
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	2100      	movs	r1, #0
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <handle_uart+0xbc>)
 800111c:	f002 fb32 	bl	8003784 <memset>
    		return;
 8001120:	e005      	b.n	800112e <handle_uart+0xa6>
    	}
    }

    handle_cmd_overflow();
 8001122:	f7ff ff83 	bl	800102c <handle_cmd_overflow>
    append_recieved_char();
 8001126:	f7ff ff99 	bl	800105c <append_recieved_char>
 800112a:	e000      	b.n	800112e <handle_uart+0xa6>
    		return;
 800112c:	bf00      	nop
}
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000597 	.word	0x20000597
 8001138:	20000495 	.word	0x20000495
 800113c:	20000494 	.word	0x20000494
 8001140:	200005a8 	.word	0x200005a8
 8001144:	20000498 	.word	0x20000498

08001148 <uart_init>:

static void uart_init() {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	send_cmd_newline();
 800114c:	f7ff fc40 	bl	80009d0 <send_cmd_newline>
	reset_cmd_buffer();
 8001150:	f7ff ff60 	bl	8001014 <reset_cmd_buffer>
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    (void) huart;
    is_char_received = true;
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_UART_RxCpltCallback+0x1c>)
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000495 	.word	0x20000495

08001178 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
    (void) huart;
    is_transmitted = true;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <HAL_UART_TxCpltCallback+0x1c>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000012c 	.word	0x2000012c

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 f9c4 	bl	8001528 <HAL_Init>
//  prepare_default_states();
  //apply_state();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f814 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f7ff fa08 	bl	80005b8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 80011a8:	f000 f91a 	bl	80013e0 <MX_USART6_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uart_init();
 80011ac:	f7ff ffcc 	bl	8001148 <uart_init>
//	      HAL_UART_Receive_IT (&huart6, str, 1);
//	    }
//	   print("\n\r");
//	   print(str);

	  handle_uart();
 80011b0:	f7ff ff6a 	bl	8001088 <handle_uart>
	  prepare_default_states();
 80011b4:	f7ff fbb0 	bl	8000918 <prepare_default_states>
	  save_state();
 80011b8:	f7ff fabc 	bl	8000734 <save_state>
	  apply_button();
 80011bc:	f7ff fb74 	bl	80008a8 <apply_button>
	  apply_mode();
 80011c0:	f7ff fb26 	bl	8000810 <apply_mode>
	  HAL_Delay(LOOP_DELAY);
 80011c4:	2064      	movs	r0, #100	; 0x64
 80011c6:	f000 fa21 	bl	800160c <HAL_Delay>
	  handle_uart();
 80011ca:	e7f1      	b.n	80011b0 <main+0x18>

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b094      	sub	sp, #80	; 0x50
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0320 	add.w	r3, r7, #32
 80011d6:	2230      	movs	r2, #48	; 0x30
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f002 fad2 	bl	8003784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <SystemClock_Config+0xb8>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	4a22      	ldr	r2, [pc, #136]	; (8001284 <SystemClock_Config+0xb8>)
 80011fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001200:	4b20      	ldr	r3, [pc, #128]	; (8001284 <SystemClock_Config+0xb8>)
 8001202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800120c:	2300      	movs	r3, #0
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <SystemClock_Config+0xbc>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001218:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <SystemClock_Config+0xbc>)
 800121a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <SystemClock_Config+0xbc>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001230:	2301      	movs	r3, #1
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001234:	2310      	movs	r3, #16
 8001236:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fd89 	bl	8001d58 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800124c:	f000 f81e 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f000 ffec 	bl	8002248 <HAL_RCC_ClockConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001276:	f000 f809 	bl	800128c <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	3750      	adds	r7, #80	; 0x50
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001294:	e7fe      	b.n	8001294 <Error_Handler+0x8>
	...

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <NMI_Handler+0x4>

080012ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <HardFault_Handler+0x4>

080012f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <MemManage_Handler+0x4>

080012fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012fe:	e7fe      	b.n	80012fe <BusFault_Handler+0x4>

08001300 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001304:	e7fe      	b.n	8001304 <UsageFault_Handler+0x4>

08001306 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001334:	f000 f94a 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}

0800133c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <USART6_IRQHandler+0x10>)
 8001342:	f001 fb47 	bl	80029d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200005a8 	.word	0x200005a8

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f002 f9d6 	bl	8003730 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20030000 	.word	0x20030000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	2000059c 	.word	0x2000059c
 80013b8:	20000600 	.word	0x20000600

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_USART6_UART_Init+0x4c>)
 80013e6:	4a12      	ldr	r2, [pc, #72]	; (8001430 <MX_USART6_UART_Init+0x50>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_USART6_UART_Init+0x4c>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_USART6_UART_Init+0x4c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <MX_USART6_UART_Init+0x4c>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <MX_USART6_UART_Init+0x4c>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b09      	ldr	r3, [pc, #36]	; (800142c <MX_USART6_UART_Init+0x4c>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <MX_USART6_UART_Init+0x4c>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <MX_USART6_UART_Init+0x4c>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001416:	4805      	ldr	r0, [pc, #20]	; (800142c <MX_USART6_UART_Init+0x4c>)
 8001418:	f001 f8e6 	bl	80025e8 <HAL_UART_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001422:	f7ff ff33 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200005a8 	.word	0x200005a8
 8001430:	40011400 	.word	0x40011400

08001434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1d      	ldr	r2, [pc, #116]	; (80014c8 <HAL_UART_MspInit+0x94>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d133      	bne.n	80014be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_UART_MspInit+0x98>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <HAL_UART_MspInit+0x98>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_UART_MspInit+0x98>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148e:	23c0      	movs	r3, #192	; 0xc0
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800149e:	2308      	movs	r3, #8
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <HAL_UART_MspInit+0x9c>)
 80014aa:	f000 fa77 	bl	800199c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2100      	movs	r1, #0
 80014b2:	2047      	movs	r0, #71	; 0x47
 80014b4:	f000 f9a9 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80014b8:	2047      	movs	r0, #71	; 0x47
 80014ba:	f000 f9c2 	bl	8001842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3728      	adds	r7, #40	; 0x28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40011400 	.word	0x40011400
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020800 	.word	0x40020800

080014d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480d      	ldr	r0, [pc, #52]	; (8001510 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014da:	490e      	ldr	r1, [pc, #56]	; (8001514 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014dc:	4a0e      	ldr	r2, [pc, #56]	; (8001518 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014f0:	4c0b      	ldr	r4, [pc, #44]	; (8001520 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014fe:	f7ff ff5d 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001502:	f002 f91b 	bl	800373c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001506:	f7ff fe47 	bl	8001198 <main>
  bx  lr    
 800150a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800150c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8001518:	08004c64 	.word	0x08004c64
  ldr r2, =_sbss
 800151c:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8001520:	20000600 	.word	0x20000600

08001524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC_IRQHandler>
	...

08001528 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <HAL_Init+0x40>)
 8001532:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001536:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <HAL_Init+0x40>)
 800153e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001542:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x40>)
 800154a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f94f 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fe9c 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f967 	bl	800185e <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 f92f 	bl	800180a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000134 	.word	0x20000134
 80015c4:	2000013c 	.word	0x2000013c
 80015c8:	20000138 	.word	0x20000138

080015cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_IncTick+0x20>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_IncTick+0x24>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a04      	ldr	r2, [pc, #16]	; (80015f0 <HAL_IncTick+0x24>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	2000013c 	.word	0x2000013c
 80015f0:	200005ec 	.word	0x200005ec

080015f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  return uwTick;
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <HAL_GetTick+0x14>)
 80015fa:	681b      	ldr	r3, [r3, #0]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	200005ec 	.word	0x200005ec

0800160c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001614:	f7ff ffee 	bl	80015f4 <HAL_GetTick>
 8001618:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001624:	d005      	beq.n	8001632 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001626:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <HAL_Delay+0x44>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4413      	add	r3, r2
 8001630:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001632:	bf00      	nop
 8001634:	f7ff ffde 	bl	80015f4 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	429a      	cmp	r2, r3
 8001642:	d8f7      	bhi.n	8001634 <HAL_Delay+0x28>
  {
  }
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	2000013c 	.word	0x2000013c

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <SysTick_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ce:	210f      	movs	r1, #15
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f7ff ff8e 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SysTick_Config+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SysTick_Config+0x40>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff29 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff3e 	bl	800169c <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff8e 	bl	8001748 <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5d 	bl	80016f4 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff31 	bl	80016b8 <__NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffa2 	bl	80017b0 <SysTick_Config>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff feb6 	bl	80015f4 <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d008      	beq.n	80018a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e052      	b.n	800194e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0216 	bic.w	r2, r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <HAL_DMA_Abort+0x62>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0208 	bic.w	r2, r2, #8
 80018e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f8:	e013      	b.n	8001922 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fa:	f7ff fe7b 	bl	80015f4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b05      	cmp	r3, #5
 8001906:	d90c      	bls.n	8001922 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2220      	movs	r2, #32
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e015      	b.n	800194e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e4      	bne.n	80018fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	223f      	movs	r2, #63	; 0x3f
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d004      	beq.n	8001974 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e00c      	b.n	800198e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2205      	movs	r2, #5
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e177      	b.n	8001ca8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8166 	bne.w	8001ca2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80c0 	beq.w	8001ca2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_GPIO_Init+0x324>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a65      	ldr	r2, [pc, #404]	; (8001cc0 <HAL_GPIO_Init+0x324>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_GPIO_Init+0x324>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3e:	4a61      	ldr	r2, [pc, #388]	; (8001cc4 <HAL_GPIO_Init+0x328>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_GPIO_Init+0x32c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d037      	beq.n	8001bda <HAL_GPIO_Init+0x23e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a57      	ldr	r2, [pc, #348]	; (8001ccc <HAL_GPIO_Init+0x330>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d031      	beq.n	8001bd6 <HAL_GPIO_Init+0x23a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a56      	ldr	r2, [pc, #344]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d02b      	beq.n	8001bd2 <HAL_GPIO_Init+0x236>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a55      	ldr	r2, [pc, #340]	; (8001cd4 <HAL_GPIO_Init+0x338>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d025      	beq.n	8001bce <HAL_GPIO_Init+0x232>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_GPIO_Init+0x33c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01f      	beq.n	8001bca <HAL_GPIO_Init+0x22e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <HAL_GPIO_Init+0x340>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d019      	beq.n	8001bc6 <HAL_GPIO_Init+0x22a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_GPIO_Init+0x344>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0x226>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a51      	ldr	r2, [pc, #324]	; (8001ce4 <HAL_GPIO_Init+0x348>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <HAL_GPIO_Init+0x222>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_GPIO_Init+0x34c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x21e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4f      	ldr	r2, [pc, #316]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_GPIO_Init+0x21a>
 8001bb2:	2309      	movs	r3, #9
 8001bb4:	e012      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	e010      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bba:	2308      	movs	r3, #8
 8001bbc:	e00e      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	; (8001cc4 <HAL_GPIO_Init+0x328>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c1e:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f ae84 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40021c00 	.word	0x40021c00
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40022400 	.word	0x40022400
 8001cf0:	40013c00 	.word	0x40013c00

08001cf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e001      	b.n	8001d16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
 8001d30:	4613      	mov	r3, r2
 8001d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d34:	787b      	ldrb	r3, [r7, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d40:	e003      	b.n	8001d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e264      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d075      	beq.n	8001e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d76:	4ba3      	ldr	r3, [pc, #652]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4ba0      	ldr	r3, [pc, #640]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d112      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b9d      	ldr	r3, [pc, #628]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d9a:	d10b      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b99      	ldr	r3, [pc, #612]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05b      	beq.n	8001e60 <HAL_RCC_OscConfig+0x108>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d157      	bne.n	8001e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e23f      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x74>
 8001dbe:	4b91      	ldr	r3, [pc, #580]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a90      	ldr	r2, [pc, #576]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b8b      	ldr	r3, [pc, #556]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a8a      	ldr	r2, [pc, #552]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a87      	ldr	r2, [pc, #540]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001df0:	4b84      	ldr	r3, [pc, #528]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a83      	ldr	r2, [pc, #524]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b81      	ldr	r3, [pc, #516]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a80      	ldr	r2, [pc, #512]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fbf0 	bl	80015f4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fbec 	bl	80015f4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e204      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xc0>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fbdc 	bl	80015f4 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fbd8 	bl	80015f4 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1f0      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b6c      	ldr	r3, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xe8>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6e:	4b65      	ldr	r3, [pc, #404]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b62      	ldr	r3, [pc, #392]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b5f      	ldr	r3, [pc, #380]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b5c      	ldr	r3, [pc, #368]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c4      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4952      	ldr	r1, [pc, #328]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b4f      	ldr	r3, [pc, #316]	; (8002008 <HAL_RCC_OscConfig+0x2b0>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fb91 	bl	80015f4 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fb8d 	bl	80015f4 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a5      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b43      	ldr	r3, [pc, #268]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4940      	ldr	r1, [pc, #256]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_OscConfig+0x2b0>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fb70 	bl	80015f4 <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fb6c 	bl	80015f4 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e184      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d030      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b30      	ldr	r3, [pc, #192]	; (800200c <HAL_RCC_OscConfig+0x2b4>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fb50 	bl	80015f4 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fb4c 	bl	80015f4 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e164      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x200>
 8001f76:	e015      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_RCC_OscConfig+0x2b4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb39 	bl	80015f4 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f86:	f7ff fb35 	bl	80015f4 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e14d      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f0      	bne.n	8001f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 80a0 	beq.w	80020f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	4b13      	ldr	r3, [pc, #76]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b0f      	ldr	r3, [pc, #60]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	; (8002004 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_OscConfig+0x2b8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d121      	bne.n	8002032 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_RCC_OscConfig+0x2b8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_RCC_OscConfig+0x2b8>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fafb 	bl	80015f4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	e011      	b.n	8002026 <HAL_RCC_OscConfig+0x2ce>
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	42470000 	.word	0x42470000
 800200c:	42470e80 	.word	0x42470e80
 8002010:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002014:	f7ff faee 	bl	80015f4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e106      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	4b85      	ldr	r3, [pc, #532]	; (800223c <HAL_RCC_OscConfig+0x4e4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x2f0>
 800203a:	4b81      	ldr	r3, [pc, #516]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a80      	ldr	r2, [pc, #512]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
 8002046:	e01c      	b.n	8002082 <HAL_RCC_OscConfig+0x32a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d10c      	bne.n	800206a <HAL_RCC_OscConfig+0x312>
 8002050:	4b7b      	ldr	r3, [pc, #492]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	4a7a      	ldr	r2, [pc, #488]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	4b78      	ldr	r3, [pc, #480]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	4a77      	ldr	r2, [pc, #476]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	; 0x70
 8002068:	e00b      	b.n	8002082 <HAL_RCC_OscConfig+0x32a>
 800206a:	4b75      	ldr	r3, [pc, #468]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	4a74      	ldr	r2, [pc, #464]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6713      	str	r3, [r2, #112]	; 0x70
 8002076:	4b72      	ldr	r3, [pc, #456]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a71      	ldr	r2, [pc, #452]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d015      	beq.n	80020b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff fab3 	bl	80015f4 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff faaf 	bl	80015f4 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0c5      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	4b65      	ldr	r3, [pc, #404]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ee      	beq.n	8002092 <HAL_RCC_OscConfig+0x33a>
 80020b4:	e014      	b.n	80020e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fa9d 	bl	80015f4 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fa99 	bl	80015f4 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0af      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ee      	bne.n	80020be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b56      	ldr	r3, [pc, #344]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a55      	ldr	r2, [pc, #340]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 809b 	beq.w	8002232 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020fc:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d05c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d141      	bne.n	8002194 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b4c      	ldr	r3, [pc, #304]	; (8002244 <HAL_RCC_OscConfig+0x4ec>)
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002116:	f7ff fa6d 	bl	80015f4 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7ff fa69 	bl	80015f4 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e081      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f0      	bne.n	800211e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	431a      	orrs	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	019b      	lsls	r3, r3, #6
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	085b      	lsrs	r3, r3, #1
 8002154:	3b01      	subs	r3, #1
 8002156:	041b      	lsls	r3, r3, #16
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215e:	061b      	lsls	r3, r3, #24
 8002160:	4937      	ldr	r1, [pc, #220]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002166:	4b37      	ldr	r3, [pc, #220]	; (8002244 <HAL_RCC_OscConfig+0x4ec>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216c:	f7ff fa42 	bl	80015f4 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff fa3e 	bl	80015f4 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e056      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x41c>
 8002192:	e04e      	b.n	8002232 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002194:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x4ec>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7ff fa2b 	bl	80015f4 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a2:	f7ff fa27 	bl	80015f4 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e03f      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x44a>
 80021c0:	e037      	b.n	8002232 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e032      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_RCC_OscConfig+0x4e8>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d028      	beq.n	800222e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d121      	bne.n	800222e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d11a      	bne.n	800222e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021fe:	4013      	ands	r3, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002204:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002206:	4293      	cmp	r3, r2
 8002208:	d111      	bne.n	800222e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d107      	bne.n	800222e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d001      	beq.n	8002232 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40007000 	.word	0x40007000
 8002240:	40023800 	.word	0x40023800
 8002244:	42470060 	.word	0x42470060

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cc      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b68      	ldr	r3, [pc, #416]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d90c      	bls.n	8002284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d044      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d119      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	2b03      	cmp	r3, #3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e067      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4934      	ldr	r1, [pc, #208]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff f95c 	bl	80015f4 <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff f958 	bl	80015f4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d20c      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f8bc 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	08004a8c 	.word	0x08004a8c
 800240c:	20000134 	.word	0x20000134
 8002410:	20000138 	.word	0x20000138

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	b5b0      	push	{r4, r5, r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800241a:	2100      	movs	r1, #0
 800241c:	6079      	str	r1, [r7, #4]
 800241e:	2100      	movs	r1, #0
 8002420:	60f9      	str	r1, [r7, #12]
 8002422:	2100      	movs	r1, #0
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002426:	2100      	movs	r1, #0
 8002428:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242a:	4952      	ldr	r1, [pc, #328]	; (8002574 <HAL_RCC_GetSysClockFreq+0x160>)
 800242c:	6889      	ldr	r1, [r1, #8]
 800242e:	f001 010c 	and.w	r1, r1, #12
 8002432:	2908      	cmp	r1, #8
 8002434:	d00d      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x3e>
 8002436:	2908      	cmp	r1, #8
 8002438:	f200 8094 	bhi.w	8002564 <HAL_RCC_GetSysClockFreq+0x150>
 800243c:	2900      	cmp	r1, #0
 800243e:	d002      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x32>
 8002440:	2904      	cmp	r1, #4
 8002442:	d003      	beq.n	800244c <HAL_RCC_GetSysClockFreq+0x38>
 8002444:	e08e      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002446:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <HAL_RCC_GetSysClockFreq+0x164>)
 8002448:	60bb      	str	r3, [r7, #8]
       break;
 800244a:	e08e      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244c:	4b4b      	ldr	r3, [pc, #300]	; (800257c <HAL_RCC_GetSysClockFreq+0x168>)
 800244e:	60bb      	str	r3, [r7, #8]
      break;
 8002450:	e08b      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002452:	4948      	ldr	r1, [pc, #288]	; (8002574 <HAL_RCC_GetSysClockFreq+0x160>)
 8002454:	6849      	ldr	r1, [r1, #4]
 8002456:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800245a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245c:	4945      	ldr	r1, [pc, #276]	; (8002574 <HAL_RCC_GetSysClockFreq+0x160>)
 800245e:	6849      	ldr	r1, [r1, #4]
 8002460:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002464:	2900      	cmp	r1, #0
 8002466:	d024      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002468:	4942      	ldr	r1, [pc, #264]	; (8002574 <HAL_RCC_GetSysClockFreq+0x160>)
 800246a:	6849      	ldr	r1, [r1, #4]
 800246c:	0989      	lsrs	r1, r1, #6
 800246e:	4608      	mov	r0, r1
 8002470:	f04f 0100 	mov.w	r1, #0
 8002474:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002478:	f04f 0500 	mov.w	r5, #0
 800247c:	ea00 0204 	and.w	r2, r0, r4
 8002480:	ea01 0305 	and.w	r3, r1, r5
 8002484:	493d      	ldr	r1, [pc, #244]	; (800257c <HAL_RCC_GetSysClockFreq+0x168>)
 8002486:	fb01 f003 	mul.w	r0, r1, r3
 800248a:	2100      	movs	r1, #0
 800248c:	fb01 f102 	mul.w	r1, r1, r2
 8002490:	1844      	adds	r4, r0, r1
 8002492:	493a      	ldr	r1, [pc, #232]	; (800257c <HAL_RCC_GetSysClockFreq+0x168>)
 8002494:	fba2 0101 	umull	r0, r1, r2, r1
 8002498:	1863      	adds	r3, r4, r1
 800249a:	4619      	mov	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	f7fd ff0c 	bl	80002c0 <__aeabi_uldivmod>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4613      	mov	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e04a      	b.n	8002548 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	4b30      	ldr	r3, [pc, #192]	; (8002574 <HAL_RCC_GetSysClockFreq+0x160>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	461a      	mov	r2, r3
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024c2:	f04f 0100 	mov.w	r1, #0
 80024c6:	ea02 0400 	and.w	r4, r2, r0
 80024ca:	ea03 0501 	and.w	r5, r3, r1
 80024ce:	4620      	mov	r0, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	014b      	lsls	r3, r1, #5
 80024dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024e0:	0142      	lsls	r2, r0, #5
 80024e2:	4610      	mov	r0, r2
 80024e4:	4619      	mov	r1, r3
 80024e6:	1b00      	subs	r0, r0, r4
 80024e8:	eb61 0105 	sbc.w	r1, r1, r5
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	018b      	lsls	r3, r1, #6
 80024f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024fa:	0182      	lsls	r2, r0, #6
 80024fc:	1a12      	subs	r2, r2, r0
 80024fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002502:	f04f 0000 	mov.w	r0, #0
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	00d9      	lsls	r1, r3, #3
 800250c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002510:	00d0      	lsls	r0, r2, #3
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	1912      	adds	r2, r2, r4
 8002518:	eb45 0303 	adc.w	r3, r5, r3
 800251c:	f04f 0000 	mov.w	r0, #0
 8002520:	f04f 0100 	mov.w	r1, #0
 8002524:	0299      	lsls	r1, r3, #10
 8002526:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800252a:	0290      	lsls	r0, r2, #10
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4610      	mov	r0, r2
 8002532:	4619      	mov	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	461a      	mov	r2, r3
 8002538:	f04f 0300 	mov.w	r3, #0
 800253c:	f7fd fec0 	bl	80002c0 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4613      	mov	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_RCC_GetSysClockFreq+0x160>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0c1b      	lsrs	r3, r3, #16
 800254e:	f003 0303 	and.w	r3, r3, #3
 8002552:	3301      	adds	r3, #1
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	60bb      	str	r3, [r7, #8]
      break;
 8002562:	e002      	b.n	800256a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <HAL_RCC_GetSysClockFreq+0x164>)
 8002566:	60bb      	str	r3, [r7, #8]
      break;
 8002568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256a:	68bb      	ldr	r3, [r7, #8]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bdb0      	pop	{r4, r5, r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	00f42400 	.word	0x00f42400
 800257c:	017d7840 	.word	0x017d7840

08002580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002584:	4b03      	ldr	r3, [pc, #12]	; (8002594 <HAL_RCC_GetHCLKFreq+0x14>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000134 	.word	0x20000134

08002598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800259c:	f7ff fff0 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	0a9b      	lsrs	r3, r3, #10
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	4903      	ldr	r1, [pc, #12]	; (80025bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40023800 	.word	0x40023800
 80025bc:	08004a9c 	.word	0x08004a9c

080025c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025c4:	f7ff ffdc 	bl	8002580 <HAL_RCC_GetHCLKFreq>
 80025c8:	4602      	mov	r2, r0
 80025ca:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0b5b      	lsrs	r3, r3, #13
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4903      	ldr	r1, [pc, #12]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d6:	5ccb      	ldrb	r3, [r1, r3]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025dc:	4618      	mov	r0, r3
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08004a9c 	.word	0x08004a9c

080025e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e03f      	b.n	800267a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fe ff10 	bl	8001434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800262a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 feb7 	bl	80033a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002640:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002650:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68da      	ldr	r2, [r3, #12]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002660:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b08a      	sub	sp, #40	; 0x28
 8002686:	af02      	add	r7, sp, #8
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	603b      	str	r3, [r7, #0]
 800268e:	4613      	mov	r3, r2
 8002690:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d17c      	bne.n	800279c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_UART_Transmit+0x2c>
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e075      	b.n	800279e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Transmit+0x3e>
 80026bc:	2302      	movs	r3, #2
 80026be:	e06e      	b.n	800279e <HAL_UART_Transmit+0x11c>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2221      	movs	r2, #33	; 0x21
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026d6:	f7fe ff8d 	bl	80015f4 <HAL_GetTick>
 80026da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	88fa      	ldrh	r2, [r7, #6]
 80026e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	88fa      	ldrh	r2, [r7, #6]
 80026e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f0:	d108      	bne.n	8002704 <HAL_UART_Transmit+0x82>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d104      	bne.n	8002704 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	61bb      	str	r3, [r7, #24]
 8002702:	e003      	b.n	800270c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002714:	e02a      	b.n	800276c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2200      	movs	r2, #0
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fbfb 	bl	8002f1c <UART_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e036      	b.n	800279e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	461a      	mov	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002744:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	3302      	adds	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	e007      	b.n	800275e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	3301      	adds	r3, #1
 800275c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002770:	b29b      	uxth	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1cf      	bne.n	8002716 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	2140      	movs	r1, #64	; 0x40
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 fbcb 	bl	8002f1c <UART_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e006      	b.n	800279e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002798:	2300      	movs	r3, #0
 800279a:	e000      	b.n	800279e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800279c:	2302      	movs	r3, #2
  }
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b08a      	sub	sp, #40	; 0x28
 80027aa:	af02      	add	r7, sp, #8
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	f040 808c 	bne.w	80028e0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <HAL_UART_Receive+0x2e>
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e084      	b.n	80028e2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Receive+0x40>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e07d      	b.n	80028e2 <HAL_UART_Receive+0x13c>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2222      	movs	r2, #34	; 0x22
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002802:	f7fe fef7 	bl	80015f4 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	88fa      	ldrh	r2, [r7, #6]
 8002812:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281c:	d108      	bne.n	8002830 <HAL_UART_Receive+0x8a>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d104      	bne.n	8002830 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	e003      	b.n	8002838 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002840:	e043      	b.n	80028ca <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2200      	movs	r2, #0
 800284a:	2120      	movs	r1, #32
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 fb65 	bl	8002f1c <UART_WaitOnFlagUntilTimeout>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e042      	b.n	80028e2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800286e:	b29a      	uxth	r2, r3
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	3302      	adds	r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e01f      	b.n	80028bc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	d007      	beq.n	8002896 <HAL_UART_Receive+0xf0>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10a      	bne.n	80028a4 <HAL_UART_Receive+0xfe>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e008      	b.n	80028b6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1b6      	bne.n	8002842 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	4613      	mov	r3, r2
 80028f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b20      	cmp	r3, #32
 8002902:	d130      	bne.n	8002966 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_UART_Transmit_IT+0x26>
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e029      	b.n	8002968 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_UART_Transmit_IT+0x38>
 800291e:	2302      	movs	r3, #2
 8002920:	e022      	b.n	8002968 <HAL_UART_Transmit_IT+0x7e>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	; 0x21
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68da      	ldr	r2, [r3, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002960:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	4613      	mov	r3, r2
 8002980:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b20      	cmp	r3, #32
 800298c:	d11d      	bne.n	80029ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_UART_Receive_IT+0x26>
 8002994:	88fb      	ldrh	r3, [r7, #6]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e016      	b.n	80029cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_UART_Receive_IT+0x38>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e00f      	b.n	80029cc <HAL_UART_Receive_IT+0x58>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80029ba:	88fb      	ldrh	r3, [r7, #6]
 80029bc:	461a      	mov	r2, r3
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 fb19 	bl	8002ff8 <UART_Start_Receive_IT>
 80029c6:	4603      	mov	r3, r0
 80029c8:	e000      	b.n	80029cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80029ca:	2302      	movs	r3, #2
  }
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b0ba      	sub	sp, #232	; 0xe8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1e:	f003 0320 	and.w	r3, r3, #32
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_UART_IRQHandler+0x66>
 8002a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fbf9 	bl	800322a <UART_Receive_IT>
      return;
 8002a38:	e256      	b.n	8002ee8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80de 	beq.w	8002c00 <HAL_UART_IRQHandler+0x22c>
 8002a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d106      	bne.n	8002a5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80d1 	beq.w	8002c00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_UART_IRQHandler+0xae>
 8002a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f043 0201 	orr.w	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_UART_IRQHandler+0xd2>
 8002a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d005      	beq.n	8002aa6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f043 0202 	orr.w	r2, r3, #2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00b      	beq.n	8002aca <HAL_UART_IRQHandler+0xf6>
 8002ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d005      	beq.n	8002aca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d011      	beq.n	8002afa <HAL_UART_IRQHandler+0x126>
 8002ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ae2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0208 	orr.w	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 81ed 	beq.w	8002ede <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d008      	beq.n	8002b22 <HAL_UART_IRQHandler+0x14e>
 8002b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b14:	f003 0320 	and.w	r3, r3, #32
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fb84 	bl	800322a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695b      	ldr	r3, [r3, #20]
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	bf0c      	ite	eq
 8002b30:	2301      	moveq	r3, #1
 8002b32:	2300      	movne	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 0308 	and.w	r3, r3, #8
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <HAL_UART_IRQHandler+0x17a>
 8002b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d04f      	beq.n	8002bee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa8c 	bl	800306c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5e:	2b40      	cmp	r3, #64	; 0x40
 8002b60:	d141      	bne.n	8002be6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3314      	adds	r3, #20
 8002b68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b70:	e853 3f00 	ldrex	r3, [r3]
 8002b74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b9e:	e841 2300 	strex	r3, r2, [r1]
 8002ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1d9      	bne.n	8002b62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d013      	beq.n	8002bde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	4a7d      	ldr	r2, [pc, #500]	; (8002db0 <HAL_UART_IRQHandler+0x3dc>)
 8002bbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe fec7 	bl	8001956 <HAL_DMA_Abort_IT>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d016      	beq.n	8002bfc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bdc:	e00e      	b.n	8002bfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f986 	bl	8002ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be4:	e00a      	b.n	8002bfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f982 	bl	8002ef0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bec:	e006      	b.n	8002bfc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f97e 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bfa:	e170      	b.n	8002ede <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfc:	bf00      	nop
    return;
 8002bfe:	e16e      	b.n	8002ede <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	f040 814a 	bne.w	8002e9e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 8143 	beq.w	8002e9e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	f000 813c 	beq.w	8002e9e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c46:	2b40      	cmp	r3, #64	; 0x40
 8002c48:	f040 80b4 	bne.w	8002db4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8140 	beq.w	8002ee2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	f080 8139 	bcs.w	8002ee2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c82:	f000 8088 	beq.w	8002d96 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cb2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cc2:	e841 2300 	strex	r3, r2, [r1]
 8002cc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1d9      	bne.n	8002c86 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3314      	adds	r3, #20
 8002cd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ce4:	f023 0301 	bic.w	r3, r3, #1
 8002ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3314      	adds	r3, #20
 8002cf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cf6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002cfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1e1      	bne.n	8002cd2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3314      	adds	r3, #20
 8002d14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d18:	e853 3f00 	ldrex	r3, [r3]
 8002d1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	3314      	adds	r3, #20
 8002d2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e3      	bne.n	8002d0e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	e853 3f00 	ldrex	r3, [r3]
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	f023 0310 	bic.w	r3, r3, #16
 8002d6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	330c      	adds	r3, #12
 8002d74:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d78:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d7a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d80:	e841 2300 	strex	r3, r2, [r1]
 8002d84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1e3      	bne.n	8002d54 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fd70 	bl	8001876 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f8ac 	bl	8002f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dac:	e099      	b.n	8002ee2 <HAL_UART_IRQHandler+0x50e>
 8002dae:	bf00      	nop
 8002db0:	08003133 	.word	0x08003133
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 808b 	beq.w	8002ee6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 8086 	beq.w	8002ee6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	330c      	adds	r3, #12
 8002de0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	e853 3f00 	ldrex	r3, [r3]
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002df0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	330c      	adds	r3, #12
 8002dfa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002dfe:	647a      	str	r2, [r7, #68]	; 0x44
 8002e00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e3      	bne.n	8002dda <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3314      	adds	r3, #20
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	623b      	str	r3, [r7, #32]
   return(result);
 8002e22:	6a3b      	ldr	r3, [r7, #32]
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3314      	adds	r3, #20
 8002e32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e36:	633a      	str	r2, [r7, #48]	; 0x30
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3e:	e841 2300 	strex	r3, r2, [r1]
 8002e42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1e3      	bne.n	8002e12 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	330c      	adds	r3, #12
 8002e5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f023 0310 	bic.w	r3, r3, #16
 8002e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	330c      	adds	r3, #12
 8002e78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e7c:	61fa      	str	r2, [r7, #28]
 8002e7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	69b9      	ldr	r1, [r7, #24]
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	e841 2300 	strex	r3, r2, [r1]
 8002e88:	617b      	str	r3, [r7, #20]
   return(result);
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e3      	bne.n	8002e58 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e94:	4619      	mov	r1, r3
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f834 	bl	8002f04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e9c:	e023      	b.n	8002ee6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d009      	beq.n	8002ebe <HAL_UART_IRQHandler+0x4ea>
 8002eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f94f 	bl	800315a <UART_Transmit_IT>
    return;
 8002ebc:	e014      	b.n	8002ee8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00e      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x514>
 8002eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d008      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f98f 	bl	80031fa <UART_EndTransmit_IT>
    return;
 8002edc:	e004      	b.n	8002ee8 <HAL_UART_IRQHandler+0x514>
    return;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <HAL_UART_IRQHandler+0x514>
      return;
 8002ee6:	bf00      	nop
  }
}
 8002ee8:	37e8      	adds	r7, #232	; 0xe8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop

08002ef0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b090      	sub	sp, #64	; 0x40
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2c:	e050      	b.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d04c      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d007      	beq.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x30>
 8002f3c:	f7fe fb5a 	bl	80015f4 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d241      	bcs.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f6c:	637a      	str	r2, [r7, #52]	; 0x34
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e5      	bne.n	8002f4c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	3314      	adds	r3, #20
 8002f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3314      	adds	r3, #20
 8002f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa0:	623a      	str	r2, [r7, #32]
 8002fa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	69f9      	ldr	r1, [r7, #28]
 8002fa6:	6a3a      	ldr	r2, [r7, #32]
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e5      	bne.n	8002f80 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00f      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d09f      	beq.n	8002f2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3740      	adds	r7, #64	; 0x40
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2222      	movs	r2, #34	; 0x22
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800303c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f042 0201 	orr.w	r2, r2, #1
 800304c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0220 	orr.w	r2, r2, #32
 800305c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800306c:	b480      	push	{r7}
 800306e:	b095      	sub	sp, #84	; 0x54
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	330c      	adds	r3, #12
 800307a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800307e:	e853 3f00 	ldrex	r3, [r3]
 8003082:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800308a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	330c      	adds	r3, #12
 8003092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003094:	643a      	str	r2, [r7, #64]	; 0x40
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800309a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e5      	bne.n	8003074 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3314      	adds	r3, #20
 80030c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d0:	e841 2300 	strex	r3, r2, [r1]
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1e5      	bne.n	80030a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d119      	bne.n	8003118 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	330c      	adds	r3, #12
 80030ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	e853 3f00 	ldrex	r3, [r3]
 80030f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f023 0310 	bic.w	r3, r3, #16
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	330c      	adds	r3, #12
 8003102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003104:	61ba      	str	r2, [r7, #24]
 8003106:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003108:	6979      	ldr	r1, [r7, #20]
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	e841 2300 	strex	r3, r2, [r1]
 8003110:	613b      	str	r3, [r7, #16]
   return(result);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1e5      	bne.n	80030e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2220      	movs	r2, #32
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003126:	bf00      	nop
 8003128:	3754      	adds	r7, #84	; 0x54
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7ff fecf 	bl	8002ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b21      	cmp	r3, #33	; 0x21
 800316c:	d13e      	bne.n	80031ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003176:	d114      	bne.n	80031a2 <UART_Transmit_IT+0x48>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d110      	bne.n	80031a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a1b      	ldr	r3, [r3, #32]
 8003184:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003194:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	1c9a      	adds	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	621a      	str	r2, [r3, #32]
 80031a0:	e008      	b.n	80031b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6211      	str	r1, [r2, #32]
 80031ac:	781a      	ldrb	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29b      	uxth	r3, r3
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	4619      	mov	r1, r3
 80031c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10f      	bne.n	80031e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	e000      	b.n	80031ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003210:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd ffac 	bl	8001178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b08c      	sub	sp, #48	; 0x30
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b22      	cmp	r3, #34	; 0x22
 800323c:	f040 80ab 	bne.w	8003396 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003248:	d117      	bne.n	800327a <UART_Receive_IT+0x50>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d113      	bne.n	800327a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	b29b      	uxth	r3, r3
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003268:	b29a      	uxth	r2, r3
 800326a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	1c9a      	adds	r2, r3, #2
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	629a      	str	r2, [r3, #40]	; 0x28
 8003278:	e026      	b.n	80032c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328c:	d007      	beq.n	800329e <UART_Receive_IT+0x74>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <UART_Receive_IT+0x82>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e008      	b.n	80032be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4619      	mov	r1, r3
 80032d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d15a      	bne.n	8003392 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0220 	bic.w	r2, r2, #32
 80032ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	2b01      	cmp	r3, #1
 800331a:	d135      	bne.n	8003388 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	e853 3f00 	ldrex	r3, [r3]
 8003330:	613b      	str	r3, [r7, #16]
   return(result);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f023 0310 	bic.w	r3, r3, #16
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	330c      	adds	r3, #12
 8003340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003342:	623a      	str	r2, [r7, #32]
 8003344:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003346:	69f9      	ldr	r1, [r7, #28]
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	e841 2300 	strex	r3, r2, [r1]
 800334e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1e5      	bne.n	8003322 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0310 	and.w	r3, r3, #16
 8003360:	2b10      	cmp	r3, #16
 8003362:	d10a      	bne.n	800337a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800337e:	4619      	mov	r1, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fdbf 	bl	8002f04 <HAL_UARTEx_RxEventCallback>
 8003386:	e002      	b.n	800338e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fd fee5 	bl	8001158 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e002      	b.n	8003398 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003396:	2302      	movs	r3, #2
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3730      	adds	r7, #48	; 0x30
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a4:	b09f      	sub	sp, #124	; 0x7c
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b6:	68d9      	ldr	r1, [r3, #12]
 80033b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	ea40 0301 	orr.w	r3, r0, r1
 80033c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80033da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033e4:	f021 010c 	bic.w	r1, r1, #12
 80033e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ee:	430b      	orrs	r3, r1
 80033f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033fe:	6999      	ldr	r1, [r3, #24]
 8003400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	ea40 0301 	orr.w	r3, r0, r1
 8003408:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800340a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	4bc5      	ldr	r3, [pc, #788]	; (8003724 <UART_SetConfig+0x384>)
 8003410:	429a      	cmp	r2, r3
 8003412:	d004      	beq.n	800341e <UART_SetConfig+0x7e>
 8003414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	4bc3      	ldr	r3, [pc, #780]	; (8003728 <UART_SetConfig+0x388>)
 800341a:	429a      	cmp	r2, r3
 800341c:	d103      	bne.n	8003426 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800341e:	f7ff f8cf 	bl	80025c0 <HAL_RCC_GetPCLK2Freq>
 8003422:	6778      	str	r0, [r7, #116]	; 0x74
 8003424:	e002      	b.n	800342c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003426:	f7ff f8b7 	bl	8002598 <HAL_RCC_GetPCLK1Freq>
 800342a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800342c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003434:	f040 80b6 	bne.w	80035a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800343a:	461c      	mov	r4, r3
 800343c:	f04f 0500 	mov.w	r5, #0
 8003440:	4622      	mov	r2, r4
 8003442:	462b      	mov	r3, r5
 8003444:	1891      	adds	r1, r2, r2
 8003446:	6439      	str	r1, [r7, #64]	; 0x40
 8003448:	415b      	adcs	r3, r3
 800344a:	647b      	str	r3, [r7, #68]	; 0x44
 800344c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003450:	1912      	adds	r2, r2, r4
 8003452:	eb45 0303 	adc.w	r3, r5, r3
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	00d9      	lsls	r1, r3, #3
 8003460:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003464:	00d0      	lsls	r0, r2, #3
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	1911      	adds	r1, r2, r4
 800346c:	6639      	str	r1, [r7, #96]	; 0x60
 800346e:	416b      	adcs	r3, r5
 8003470:	667b      	str	r3, [r7, #100]	; 0x64
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	461a      	mov	r2, r3
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	1891      	adds	r1, r2, r2
 800347e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003480:	415b      	adcs	r3, r3
 8003482:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003488:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800348c:	f7fc ff18 	bl	80002c0 <__aeabi_uldivmod>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4ba5      	ldr	r3, [pc, #660]	; (800372c <UART_SetConfig+0x38c>)
 8003496:	fba3 2302 	umull	r2, r3, r3, r2
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	011e      	lsls	r6, r3, #4
 800349e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a0:	461c      	mov	r4, r3
 80034a2:	f04f 0500 	mov.w	r5, #0
 80034a6:	4622      	mov	r2, r4
 80034a8:	462b      	mov	r3, r5
 80034aa:	1891      	adds	r1, r2, r2
 80034ac:	6339      	str	r1, [r7, #48]	; 0x30
 80034ae:	415b      	adcs	r3, r3
 80034b0:	637b      	str	r3, [r7, #52]	; 0x34
 80034b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034b6:	1912      	adds	r2, r2, r4
 80034b8:	eb45 0303 	adc.w	r3, r5, r3
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	00d9      	lsls	r1, r3, #3
 80034c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ca:	00d0      	lsls	r0, r2, #3
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	1911      	adds	r1, r2, r4
 80034d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80034d4:	416b      	adcs	r3, r5
 80034d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	461a      	mov	r2, r3
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	1891      	adds	r1, r2, r2
 80034e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80034e6:	415b      	adcs	r3, r3
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80034f2:	f7fc fee5 	bl	80002c0 <__aeabi_uldivmod>
 80034f6:	4602      	mov	r2, r0
 80034f8:	460b      	mov	r3, r1
 80034fa:	4b8c      	ldr	r3, [pc, #560]	; (800372c <UART_SetConfig+0x38c>)
 80034fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003500:	095b      	lsrs	r3, r3, #5
 8003502:	2164      	movs	r1, #100	; 0x64
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	3332      	adds	r3, #50	; 0x32
 800350e:	4a87      	ldr	r2, [pc, #540]	; (800372c <UART_SetConfig+0x38c>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	095b      	lsrs	r3, r3, #5
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800351c:	441e      	add	r6, r3
 800351e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003520:	4618      	mov	r0, r3
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	1894      	adds	r4, r2, r2
 800352c:	623c      	str	r4, [r7, #32]
 800352e:	415b      	adcs	r3, r3
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
 8003532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003536:	1812      	adds	r2, r2, r0
 8003538:	eb41 0303 	adc.w	r3, r1, r3
 800353c:	f04f 0400 	mov.w	r4, #0
 8003540:	f04f 0500 	mov.w	r5, #0
 8003544:	00dd      	lsls	r5, r3, #3
 8003546:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800354a:	00d4      	lsls	r4, r2, #3
 800354c:	4622      	mov	r2, r4
 800354e:	462b      	mov	r3, r5
 8003550:	1814      	adds	r4, r2, r0
 8003552:	653c      	str	r4, [r7, #80]	; 0x50
 8003554:	414b      	adcs	r3, r1
 8003556:	657b      	str	r3, [r7, #84]	; 0x54
 8003558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	461a      	mov	r2, r3
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	1891      	adds	r1, r2, r2
 8003564:	61b9      	str	r1, [r7, #24]
 8003566:	415b      	adcs	r3, r3
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800356e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003572:	f7fc fea5 	bl	80002c0 <__aeabi_uldivmod>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4b6c      	ldr	r3, [pc, #432]	; (800372c <UART_SetConfig+0x38c>)
 800357c:	fba3 1302 	umull	r1, r3, r3, r2
 8003580:	095b      	lsrs	r3, r3, #5
 8003582:	2164      	movs	r1, #100	; 0x64
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	3332      	adds	r3, #50	; 0x32
 800358e:	4a67      	ldr	r2, [pc, #412]	; (800372c <UART_SetConfig+0x38c>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	f003 0207 	and.w	r2, r3, #7
 800359a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4432      	add	r2, r6
 80035a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035a2:	e0b9      	b.n	8003718 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035a6:	461c      	mov	r4, r3
 80035a8:	f04f 0500 	mov.w	r5, #0
 80035ac:	4622      	mov	r2, r4
 80035ae:	462b      	mov	r3, r5
 80035b0:	1891      	adds	r1, r2, r2
 80035b2:	6139      	str	r1, [r7, #16]
 80035b4:	415b      	adcs	r3, r3
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035bc:	1912      	adds	r2, r2, r4
 80035be:	eb45 0303 	adc.w	r3, r5, r3
 80035c2:	f04f 0000 	mov.w	r0, #0
 80035c6:	f04f 0100 	mov.w	r1, #0
 80035ca:	00d9      	lsls	r1, r3, #3
 80035cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035d0:	00d0      	lsls	r0, r2, #3
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	eb12 0804 	adds.w	r8, r2, r4
 80035da:	eb43 0905 	adc.w	r9, r3, r5
 80035de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f04f 0100 	mov.w	r1, #0
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	008b      	lsls	r3, r1, #2
 80035f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035f6:	0082      	lsls	r2, r0, #2
 80035f8:	4640      	mov	r0, r8
 80035fa:	4649      	mov	r1, r9
 80035fc:	f7fc fe60 	bl	80002c0 <__aeabi_uldivmod>
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4b49      	ldr	r3, [pc, #292]	; (800372c <UART_SetConfig+0x38c>)
 8003606:	fba3 2302 	umull	r2, r3, r3, r2
 800360a:	095b      	lsrs	r3, r3, #5
 800360c:	011e      	lsls	r6, r3, #4
 800360e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003610:	4618      	mov	r0, r3
 8003612:	f04f 0100 	mov.w	r1, #0
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	1894      	adds	r4, r2, r2
 800361c:	60bc      	str	r4, [r7, #8]
 800361e:	415b      	adcs	r3, r3
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003626:	1812      	adds	r2, r2, r0
 8003628:	eb41 0303 	adc.w	r3, r1, r3
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	f04f 0500 	mov.w	r5, #0
 8003634:	00dd      	lsls	r5, r3, #3
 8003636:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800363a:	00d4      	lsls	r4, r2, #3
 800363c:	4622      	mov	r2, r4
 800363e:	462b      	mov	r3, r5
 8003640:	1814      	adds	r4, r2, r0
 8003642:	64bc      	str	r4, [r7, #72]	; 0x48
 8003644:	414b      	adcs	r3, r1
 8003646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	f04f 0100 	mov.w	r1, #0
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	008b      	lsls	r3, r1, #2
 800365c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003660:	0082      	lsls	r2, r0, #2
 8003662:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003666:	f7fc fe2b 	bl	80002c0 <__aeabi_uldivmod>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <UART_SetConfig+0x38c>)
 8003670:	fba3 1302 	umull	r1, r3, r3, r2
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	2164      	movs	r1, #100	; 0x64
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	3332      	adds	r3, #50	; 0x32
 8003682:	4a2a      	ldr	r2, [pc, #168]	; (800372c <UART_SetConfig+0x38c>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800368e:	441e      	add	r6, r3
 8003690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003692:	4618      	mov	r0, r3
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	1894      	adds	r4, r2, r2
 800369e:	603c      	str	r4, [r7, #0]
 80036a0:	415b      	adcs	r3, r3
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036a8:	1812      	adds	r2, r2, r0
 80036aa:	eb41 0303 	adc.w	r3, r1, r3
 80036ae:	f04f 0400 	mov.w	r4, #0
 80036b2:	f04f 0500 	mov.w	r5, #0
 80036b6:	00dd      	lsls	r5, r3, #3
 80036b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036bc:	00d4      	lsls	r4, r2, #3
 80036be:	4622      	mov	r2, r4
 80036c0:	462b      	mov	r3, r5
 80036c2:	eb12 0a00 	adds.w	sl, r2, r0
 80036c6:	eb43 0b01 	adc.w	fp, r3, r1
 80036ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	008b      	lsls	r3, r1, #2
 80036de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036e2:	0082      	lsls	r2, r0, #2
 80036e4:	4650      	mov	r0, sl
 80036e6:	4659      	mov	r1, fp
 80036e8:	f7fc fdea 	bl	80002c0 <__aeabi_uldivmod>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4b0e      	ldr	r3, [pc, #56]	; (800372c <UART_SetConfig+0x38c>)
 80036f2:	fba3 1302 	umull	r1, r3, r3, r2
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2164      	movs	r1, #100	; 0x64
 80036fa:	fb01 f303 	mul.w	r3, r1, r3
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	3332      	adds	r3, #50	; 0x32
 8003704:	4a09      	ldr	r2, [pc, #36]	; (800372c <UART_SetConfig+0x38c>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4432      	add	r2, r6
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	377c      	adds	r7, #124	; 0x7c
 800371c:	46bd      	mov	sp, r7
 800371e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003722:	bf00      	nop
 8003724:	40011000 	.word	0x40011000
 8003728:	40011400 	.word	0x40011400
 800372c:	51eb851f 	.word	0x51eb851f

08003730 <__errno>:
 8003730:	4b01      	ldr	r3, [pc, #4]	; (8003738 <__errno+0x8>)
 8003732:	6818      	ldr	r0, [r3, #0]
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000140 	.word	0x20000140

0800373c <__libc_init_array>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4d0d      	ldr	r5, [pc, #52]	; (8003774 <__libc_init_array+0x38>)
 8003740:	4c0d      	ldr	r4, [pc, #52]	; (8003778 <__libc_init_array+0x3c>)
 8003742:	1b64      	subs	r4, r4, r5
 8003744:	10a4      	asrs	r4, r4, #2
 8003746:	2600      	movs	r6, #0
 8003748:	42a6      	cmp	r6, r4
 800374a:	d109      	bne.n	8003760 <__libc_init_array+0x24>
 800374c:	4d0b      	ldr	r5, [pc, #44]	; (800377c <__libc_init_array+0x40>)
 800374e:	4c0c      	ldr	r4, [pc, #48]	; (8003780 <__libc_init_array+0x44>)
 8003750:	f001 f924 	bl	800499c <_init>
 8003754:	1b64      	subs	r4, r4, r5
 8003756:	10a4      	asrs	r4, r4, #2
 8003758:	2600      	movs	r6, #0
 800375a:	42a6      	cmp	r6, r4
 800375c:	d105      	bne.n	800376a <__libc_init_array+0x2e>
 800375e:	bd70      	pop	{r4, r5, r6, pc}
 8003760:	f855 3b04 	ldr.w	r3, [r5], #4
 8003764:	4798      	blx	r3
 8003766:	3601      	adds	r6, #1
 8003768:	e7ee      	b.n	8003748 <__libc_init_array+0xc>
 800376a:	f855 3b04 	ldr.w	r3, [r5], #4
 800376e:	4798      	blx	r3
 8003770:	3601      	adds	r6, #1
 8003772:	e7f2      	b.n	800375a <__libc_init_array+0x1e>
 8003774:	08004c5c 	.word	0x08004c5c
 8003778:	08004c5c 	.word	0x08004c5c
 800377c:	08004c5c 	.word	0x08004c5c
 8003780:	08004c60 	.word	0x08004c60

08003784 <memset>:
 8003784:	4402      	add	r2, r0
 8003786:	4603      	mov	r3, r0
 8003788:	4293      	cmp	r3, r2
 800378a:	d100      	bne.n	800378e <memset+0xa>
 800378c:	4770      	bx	lr
 800378e:	f803 1b01 	strb.w	r1, [r3], #1
 8003792:	e7f9      	b.n	8003788 <memset+0x4>

08003794 <siprintf>:
 8003794:	b40e      	push	{r1, r2, r3}
 8003796:	b500      	push	{lr}
 8003798:	b09c      	sub	sp, #112	; 0x70
 800379a:	ab1d      	add	r3, sp, #116	; 0x74
 800379c:	9002      	str	r0, [sp, #8]
 800379e:	9006      	str	r0, [sp, #24]
 80037a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80037a4:	4809      	ldr	r0, [pc, #36]	; (80037cc <siprintf+0x38>)
 80037a6:	9107      	str	r1, [sp, #28]
 80037a8:	9104      	str	r1, [sp, #16]
 80037aa:	4909      	ldr	r1, [pc, #36]	; (80037d0 <siprintf+0x3c>)
 80037ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80037b0:	9105      	str	r1, [sp, #20]
 80037b2:	6800      	ldr	r0, [r0, #0]
 80037b4:	9301      	str	r3, [sp, #4]
 80037b6:	a902      	add	r1, sp, #8
 80037b8:	f000 f8a8 	bl	800390c <_svfiprintf_r>
 80037bc:	9b02      	ldr	r3, [sp, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	b01c      	add	sp, #112	; 0x70
 80037c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037c8:	b003      	add	sp, #12
 80037ca:	4770      	bx	lr
 80037cc:	20000140 	.word	0x20000140
 80037d0:	ffff0208 	.word	0xffff0208

080037d4 <siscanf>:
 80037d4:	b40e      	push	{r1, r2, r3}
 80037d6:	b510      	push	{r4, lr}
 80037d8:	b09f      	sub	sp, #124	; 0x7c
 80037da:	ac21      	add	r4, sp, #132	; 0x84
 80037dc:	f44f 7101 	mov.w	r1, #516	; 0x204
 80037e0:	f854 2b04 	ldr.w	r2, [r4], #4
 80037e4:	9201      	str	r2, [sp, #4]
 80037e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80037ea:	9004      	str	r0, [sp, #16]
 80037ec:	9008      	str	r0, [sp, #32]
 80037ee:	f7fc fd09 	bl	8000204 <strlen>
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <siscanf+0x50>)
 80037f4:	9005      	str	r0, [sp, #20]
 80037f6:	9009      	str	r0, [sp, #36]	; 0x24
 80037f8:	930d      	str	r3, [sp, #52]	; 0x34
 80037fa:	480b      	ldr	r0, [pc, #44]	; (8003828 <siscanf+0x54>)
 80037fc:	9a01      	ldr	r2, [sp, #4]
 80037fe:	6800      	ldr	r0, [r0, #0]
 8003800:	9403      	str	r4, [sp, #12]
 8003802:	2300      	movs	r3, #0
 8003804:	9311      	str	r3, [sp, #68]	; 0x44
 8003806:	9316      	str	r3, [sp, #88]	; 0x58
 8003808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800380c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003810:	a904      	add	r1, sp, #16
 8003812:	4623      	mov	r3, r4
 8003814:	f000 f9d4 	bl	8003bc0 <__ssvfiscanf_r>
 8003818:	b01f      	add	sp, #124	; 0x7c
 800381a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800381e:	b003      	add	sp, #12
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	0800382d 	.word	0x0800382d
 8003828:	20000140 	.word	0x20000140

0800382c <__seofread>:
 800382c:	2000      	movs	r0, #0
 800382e:	4770      	bx	lr

08003830 <strncmp>:
 8003830:	b510      	push	{r4, lr}
 8003832:	b16a      	cbz	r2, 8003850 <strncmp+0x20>
 8003834:	3901      	subs	r1, #1
 8003836:	1884      	adds	r4, r0, r2
 8003838:	f810 3b01 	ldrb.w	r3, [r0], #1
 800383c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003840:	4293      	cmp	r3, r2
 8003842:	d103      	bne.n	800384c <strncmp+0x1c>
 8003844:	42a0      	cmp	r0, r4
 8003846:	d001      	beq.n	800384c <strncmp+0x1c>
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f5      	bne.n	8003838 <strncmp+0x8>
 800384c:	1a98      	subs	r0, r3, r2
 800384e:	bd10      	pop	{r4, pc}
 8003850:	4610      	mov	r0, r2
 8003852:	e7fc      	b.n	800384e <strncmp+0x1e>

08003854 <__ssputs_r>:
 8003854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	688e      	ldr	r6, [r1, #8]
 800385a:	429e      	cmp	r6, r3
 800385c:	4682      	mov	sl, r0
 800385e:	460c      	mov	r4, r1
 8003860:	4690      	mov	r8, r2
 8003862:	461f      	mov	r7, r3
 8003864:	d838      	bhi.n	80038d8 <__ssputs_r+0x84>
 8003866:	898a      	ldrh	r2, [r1, #12]
 8003868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800386c:	d032      	beq.n	80038d4 <__ssputs_r+0x80>
 800386e:	6825      	ldr	r5, [r4, #0]
 8003870:	6909      	ldr	r1, [r1, #16]
 8003872:	eba5 0901 	sub.w	r9, r5, r1
 8003876:	6965      	ldr	r5, [r4, #20]
 8003878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800387c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003880:	3301      	adds	r3, #1
 8003882:	444b      	add	r3, r9
 8003884:	106d      	asrs	r5, r5, #1
 8003886:	429d      	cmp	r5, r3
 8003888:	bf38      	it	cc
 800388a:	461d      	movcc	r5, r3
 800388c:	0553      	lsls	r3, r2, #21
 800388e:	d531      	bpl.n	80038f4 <__ssputs_r+0xa0>
 8003890:	4629      	mov	r1, r5
 8003892:	f000 ffdf 	bl	8004854 <_malloc_r>
 8003896:	4606      	mov	r6, r0
 8003898:	b950      	cbnz	r0, 80038b0 <__ssputs_r+0x5c>
 800389a:	230c      	movs	r3, #12
 800389c:	f8ca 3000 	str.w	r3, [sl]
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b0:	6921      	ldr	r1, [r4, #16]
 80038b2:	464a      	mov	r2, r9
 80038b4:	f000 ff56 	bl	8004764 <memcpy>
 80038b8:	89a3      	ldrh	r3, [r4, #12]
 80038ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c2:	81a3      	strh	r3, [r4, #12]
 80038c4:	6126      	str	r6, [r4, #16]
 80038c6:	6165      	str	r5, [r4, #20]
 80038c8:	444e      	add	r6, r9
 80038ca:	eba5 0509 	sub.w	r5, r5, r9
 80038ce:	6026      	str	r6, [r4, #0]
 80038d0:	60a5      	str	r5, [r4, #8]
 80038d2:	463e      	mov	r6, r7
 80038d4:	42be      	cmp	r6, r7
 80038d6:	d900      	bls.n	80038da <__ssputs_r+0x86>
 80038d8:	463e      	mov	r6, r7
 80038da:	4632      	mov	r2, r6
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	4641      	mov	r1, r8
 80038e0:	f000 ff4e 	bl	8004780 <memmove>
 80038e4:	68a3      	ldr	r3, [r4, #8]
 80038e6:	6822      	ldr	r2, [r4, #0]
 80038e8:	1b9b      	subs	r3, r3, r6
 80038ea:	4432      	add	r2, r6
 80038ec:	60a3      	str	r3, [r4, #8]
 80038ee:	6022      	str	r2, [r4, #0]
 80038f0:	2000      	movs	r0, #0
 80038f2:	e7db      	b.n	80038ac <__ssputs_r+0x58>
 80038f4:	462a      	mov	r2, r5
 80038f6:	f001 f807 	bl	8004908 <_realloc_r>
 80038fa:	4606      	mov	r6, r0
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d1e1      	bne.n	80038c4 <__ssputs_r+0x70>
 8003900:	6921      	ldr	r1, [r4, #16]
 8003902:	4650      	mov	r0, sl
 8003904:	f000 ff56 	bl	80047b4 <_free_r>
 8003908:	e7c7      	b.n	800389a <__ssputs_r+0x46>
	...

0800390c <_svfiprintf_r>:
 800390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	4698      	mov	r8, r3
 8003912:	898b      	ldrh	r3, [r1, #12]
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	b09d      	sub	sp, #116	; 0x74
 8003918:	4607      	mov	r7, r0
 800391a:	460d      	mov	r5, r1
 800391c:	4614      	mov	r4, r2
 800391e:	d50e      	bpl.n	800393e <_svfiprintf_r+0x32>
 8003920:	690b      	ldr	r3, [r1, #16]
 8003922:	b963      	cbnz	r3, 800393e <_svfiprintf_r+0x32>
 8003924:	2140      	movs	r1, #64	; 0x40
 8003926:	f000 ff95 	bl	8004854 <_malloc_r>
 800392a:	6028      	str	r0, [r5, #0]
 800392c:	6128      	str	r0, [r5, #16]
 800392e:	b920      	cbnz	r0, 800393a <_svfiprintf_r+0x2e>
 8003930:	230c      	movs	r3, #12
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	f04f 30ff 	mov.w	r0, #4294967295
 8003938:	e0d1      	b.n	8003ade <_svfiprintf_r+0x1d2>
 800393a:	2340      	movs	r3, #64	; 0x40
 800393c:	616b      	str	r3, [r5, #20]
 800393e:	2300      	movs	r3, #0
 8003940:	9309      	str	r3, [sp, #36]	; 0x24
 8003942:	2320      	movs	r3, #32
 8003944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003948:	f8cd 800c 	str.w	r8, [sp, #12]
 800394c:	2330      	movs	r3, #48	; 0x30
 800394e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003af8 <_svfiprintf_r+0x1ec>
 8003952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003956:	f04f 0901 	mov.w	r9, #1
 800395a:	4623      	mov	r3, r4
 800395c:	469a      	mov	sl, r3
 800395e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003962:	b10a      	cbz	r2, 8003968 <_svfiprintf_r+0x5c>
 8003964:	2a25      	cmp	r2, #37	; 0x25
 8003966:	d1f9      	bne.n	800395c <_svfiprintf_r+0x50>
 8003968:	ebba 0b04 	subs.w	fp, sl, r4
 800396c:	d00b      	beq.n	8003986 <_svfiprintf_r+0x7a>
 800396e:	465b      	mov	r3, fp
 8003970:	4622      	mov	r2, r4
 8003972:	4629      	mov	r1, r5
 8003974:	4638      	mov	r0, r7
 8003976:	f7ff ff6d 	bl	8003854 <__ssputs_r>
 800397a:	3001      	adds	r0, #1
 800397c:	f000 80aa 	beq.w	8003ad4 <_svfiprintf_r+0x1c8>
 8003980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003982:	445a      	add	r2, fp
 8003984:	9209      	str	r2, [sp, #36]	; 0x24
 8003986:	f89a 3000 	ldrb.w	r3, [sl]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80a2 	beq.w	8003ad4 <_svfiprintf_r+0x1c8>
 8003990:	2300      	movs	r3, #0
 8003992:	f04f 32ff 	mov.w	r2, #4294967295
 8003996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800399a:	f10a 0a01 	add.w	sl, sl, #1
 800399e:	9304      	str	r3, [sp, #16]
 80039a0:	9307      	str	r3, [sp, #28]
 80039a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039a6:	931a      	str	r3, [sp, #104]	; 0x68
 80039a8:	4654      	mov	r4, sl
 80039aa:	2205      	movs	r2, #5
 80039ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b0:	4851      	ldr	r0, [pc, #324]	; (8003af8 <_svfiprintf_r+0x1ec>)
 80039b2:	f7fc fc35 	bl	8000220 <memchr>
 80039b6:	9a04      	ldr	r2, [sp, #16]
 80039b8:	b9d8      	cbnz	r0, 80039f2 <_svfiprintf_r+0xe6>
 80039ba:	06d0      	lsls	r0, r2, #27
 80039bc:	bf44      	itt	mi
 80039be:	2320      	movmi	r3, #32
 80039c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039c4:	0711      	lsls	r1, r2, #28
 80039c6:	bf44      	itt	mi
 80039c8:	232b      	movmi	r3, #43	; 0x2b
 80039ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ce:	f89a 3000 	ldrb.w	r3, [sl]
 80039d2:	2b2a      	cmp	r3, #42	; 0x2a
 80039d4:	d015      	beq.n	8003a02 <_svfiprintf_r+0xf6>
 80039d6:	9a07      	ldr	r2, [sp, #28]
 80039d8:	4654      	mov	r4, sl
 80039da:	2000      	movs	r0, #0
 80039dc:	f04f 0c0a 	mov.w	ip, #10
 80039e0:	4621      	mov	r1, r4
 80039e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039e6:	3b30      	subs	r3, #48	; 0x30
 80039e8:	2b09      	cmp	r3, #9
 80039ea:	d94e      	bls.n	8003a8a <_svfiprintf_r+0x17e>
 80039ec:	b1b0      	cbz	r0, 8003a1c <_svfiprintf_r+0x110>
 80039ee:	9207      	str	r2, [sp, #28]
 80039f0:	e014      	b.n	8003a1c <_svfiprintf_r+0x110>
 80039f2:	eba0 0308 	sub.w	r3, r0, r8
 80039f6:	fa09 f303 	lsl.w	r3, r9, r3
 80039fa:	4313      	orrs	r3, r2
 80039fc:	9304      	str	r3, [sp, #16]
 80039fe:	46a2      	mov	sl, r4
 8003a00:	e7d2      	b.n	80039a8 <_svfiprintf_r+0x9c>
 8003a02:	9b03      	ldr	r3, [sp, #12]
 8003a04:	1d19      	adds	r1, r3, #4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	9103      	str	r1, [sp, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bfbb      	ittet	lt
 8003a0e:	425b      	neglt	r3, r3
 8003a10:	f042 0202 	orrlt.w	r2, r2, #2
 8003a14:	9307      	strge	r3, [sp, #28]
 8003a16:	9307      	strlt	r3, [sp, #28]
 8003a18:	bfb8      	it	lt
 8003a1a:	9204      	strlt	r2, [sp, #16]
 8003a1c:	7823      	ldrb	r3, [r4, #0]
 8003a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a20:	d10c      	bne.n	8003a3c <_svfiprintf_r+0x130>
 8003a22:	7863      	ldrb	r3, [r4, #1]
 8003a24:	2b2a      	cmp	r3, #42	; 0x2a
 8003a26:	d135      	bne.n	8003a94 <_svfiprintf_r+0x188>
 8003a28:	9b03      	ldr	r3, [sp, #12]
 8003a2a:	1d1a      	adds	r2, r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	9203      	str	r2, [sp, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	bfb8      	it	lt
 8003a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a38:	3402      	adds	r4, #2
 8003a3a:	9305      	str	r3, [sp, #20]
 8003a3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b08 <_svfiprintf_r+0x1fc>
 8003a40:	7821      	ldrb	r1, [r4, #0]
 8003a42:	2203      	movs	r2, #3
 8003a44:	4650      	mov	r0, sl
 8003a46:	f7fc fbeb 	bl	8000220 <memchr>
 8003a4a:	b140      	cbz	r0, 8003a5e <_svfiprintf_r+0x152>
 8003a4c:	2340      	movs	r3, #64	; 0x40
 8003a4e:	eba0 000a 	sub.w	r0, r0, sl
 8003a52:	fa03 f000 	lsl.w	r0, r3, r0
 8003a56:	9b04      	ldr	r3, [sp, #16]
 8003a58:	4303      	orrs	r3, r0
 8003a5a:	3401      	adds	r4, #1
 8003a5c:	9304      	str	r3, [sp, #16]
 8003a5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a62:	4826      	ldr	r0, [pc, #152]	; (8003afc <_svfiprintf_r+0x1f0>)
 8003a64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a68:	2206      	movs	r2, #6
 8003a6a:	f7fc fbd9 	bl	8000220 <memchr>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	d038      	beq.n	8003ae4 <_svfiprintf_r+0x1d8>
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <_svfiprintf_r+0x1f4>)
 8003a74:	bb1b      	cbnz	r3, 8003abe <_svfiprintf_r+0x1b2>
 8003a76:	9b03      	ldr	r3, [sp, #12]
 8003a78:	3307      	adds	r3, #7
 8003a7a:	f023 0307 	bic.w	r3, r3, #7
 8003a7e:	3308      	adds	r3, #8
 8003a80:	9303      	str	r3, [sp, #12]
 8003a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a84:	4433      	add	r3, r6
 8003a86:	9309      	str	r3, [sp, #36]	; 0x24
 8003a88:	e767      	b.n	800395a <_svfiprintf_r+0x4e>
 8003a8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a8e:	460c      	mov	r4, r1
 8003a90:	2001      	movs	r0, #1
 8003a92:	e7a5      	b.n	80039e0 <_svfiprintf_r+0xd4>
 8003a94:	2300      	movs	r3, #0
 8003a96:	3401      	adds	r4, #1
 8003a98:	9305      	str	r3, [sp, #20]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f04f 0c0a 	mov.w	ip, #10
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003aa6:	3a30      	subs	r2, #48	; 0x30
 8003aa8:	2a09      	cmp	r2, #9
 8003aaa:	d903      	bls.n	8003ab4 <_svfiprintf_r+0x1a8>
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0c5      	beq.n	8003a3c <_svfiprintf_r+0x130>
 8003ab0:	9105      	str	r1, [sp, #20]
 8003ab2:	e7c3      	b.n	8003a3c <_svfiprintf_r+0x130>
 8003ab4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ab8:	4604      	mov	r4, r0
 8003aba:	2301      	movs	r3, #1
 8003abc:	e7f0      	b.n	8003aa0 <_svfiprintf_r+0x194>
 8003abe:	ab03      	add	r3, sp, #12
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	462a      	mov	r2, r5
 8003ac4:	4b0f      	ldr	r3, [pc, #60]	; (8003b04 <_svfiprintf_r+0x1f8>)
 8003ac6:	a904      	add	r1, sp, #16
 8003ac8:	4638      	mov	r0, r7
 8003aca:	f3af 8000 	nop.w
 8003ace:	1c42      	adds	r2, r0, #1
 8003ad0:	4606      	mov	r6, r0
 8003ad2:	d1d6      	bne.n	8003a82 <_svfiprintf_r+0x176>
 8003ad4:	89ab      	ldrh	r3, [r5, #12]
 8003ad6:	065b      	lsls	r3, r3, #25
 8003ad8:	f53f af2c 	bmi.w	8003934 <_svfiprintf_r+0x28>
 8003adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ade:	b01d      	add	sp, #116	; 0x74
 8003ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ae4:	ab03      	add	r3, sp, #12
 8003ae6:	9300      	str	r3, [sp, #0]
 8003ae8:	462a      	mov	r2, r5
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <_svfiprintf_r+0x1f8>)
 8003aec:	a904      	add	r1, sp, #16
 8003aee:	4638      	mov	r0, r7
 8003af0:	f000 fa4c 	bl	8003f8c <_printf_i>
 8003af4:	e7eb      	b.n	8003ace <_svfiprintf_r+0x1c2>
 8003af6:	bf00      	nop
 8003af8:	08004ba5 	.word	0x08004ba5
 8003afc:	08004baf 	.word	0x08004baf
 8003b00:	00000000 	.word	0x00000000
 8003b04:	08003855 	.word	0x08003855
 8003b08:	08004bab 	.word	0x08004bab

08003b0c <_sungetc_r>:
 8003b0c:	b538      	push	{r3, r4, r5, lr}
 8003b0e:	1c4b      	adds	r3, r1, #1
 8003b10:	4614      	mov	r4, r2
 8003b12:	d103      	bne.n	8003b1c <_sungetc_r+0x10>
 8003b14:	f04f 35ff 	mov.w	r5, #4294967295
 8003b18:	4628      	mov	r0, r5
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	8993      	ldrh	r3, [r2, #12]
 8003b1e:	f023 0320 	bic.w	r3, r3, #32
 8003b22:	8193      	strh	r3, [r2, #12]
 8003b24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	b2cd      	uxtb	r5, r1
 8003b2a:	b18b      	cbz	r3, 8003b50 <_sungetc_r+0x44>
 8003b2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	dd08      	ble.n	8003b44 <_sungetc_r+0x38>
 8003b32:	6823      	ldr	r3, [r4, #0]
 8003b34:	1e5a      	subs	r2, r3, #1
 8003b36:	6022      	str	r2, [r4, #0]
 8003b38:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003b3c:	6863      	ldr	r3, [r4, #4]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6063      	str	r3, [r4, #4]
 8003b42:	e7e9      	b.n	8003b18 <_sungetc_r+0xc>
 8003b44:	4621      	mov	r1, r4
 8003b46:	f000 fdd1 	bl	80046ec <__submore>
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d0f1      	beq.n	8003b32 <_sungetc_r+0x26>
 8003b4e:	e7e1      	b.n	8003b14 <_sungetc_r+0x8>
 8003b50:	6921      	ldr	r1, [r4, #16]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	b151      	cbz	r1, 8003b6c <_sungetc_r+0x60>
 8003b56:	4299      	cmp	r1, r3
 8003b58:	d208      	bcs.n	8003b6c <_sungetc_r+0x60>
 8003b5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003b5e:	42a9      	cmp	r1, r5
 8003b60:	d104      	bne.n	8003b6c <_sungetc_r+0x60>
 8003b62:	3b01      	subs	r3, #1
 8003b64:	3201      	adds	r2, #1
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	6062      	str	r2, [r4, #4]
 8003b6a:	e7d5      	b.n	8003b18 <_sungetc_r+0xc>
 8003b6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8003b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b74:	6363      	str	r3, [r4, #52]	; 0x34
 8003b76:	2303      	movs	r3, #3
 8003b78:	63a3      	str	r3, [r4, #56]	; 0x38
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	2301      	movs	r3, #1
 8003b84:	e7dc      	b.n	8003b40 <_sungetc_r+0x34>

08003b86 <__ssrefill_r>:
 8003b86:	b510      	push	{r4, lr}
 8003b88:	460c      	mov	r4, r1
 8003b8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8003b8c:	b169      	cbz	r1, 8003baa <__ssrefill_r+0x24>
 8003b8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b92:	4299      	cmp	r1, r3
 8003b94:	d001      	beq.n	8003b9a <__ssrefill_r+0x14>
 8003b96:	f000 fe0d 	bl	80047b4 <_free_r>
 8003b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b9c:	6063      	str	r3, [r4, #4]
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8003ba2:	b113      	cbz	r3, 8003baa <__ssrefill_r+0x24>
 8003ba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ba6:	6023      	str	r3, [r4, #0]
 8003ba8:	bd10      	pop	{r4, pc}
 8003baa:	6923      	ldr	r3, [r4, #16]
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	6063      	str	r3, [r4, #4]
 8003bb2:	89a3      	ldrh	r3, [r4, #12]
 8003bb4:	f043 0320 	orr.w	r3, r3, #32
 8003bb8:	81a3      	strh	r3, [r4, #12]
 8003bba:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbe:	e7f3      	b.n	8003ba8 <__ssrefill_r+0x22>

08003bc0 <__ssvfiscanf_r>:
 8003bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc4:	460c      	mov	r4, r1
 8003bc6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8003bca:	2100      	movs	r1, #0
 8003bcc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8003bd0:	49b2      	ldr	r1, [pc, #712]	; (8003e9c <__ssvfiscanf_r+0x2dc>)
 8003bd2:	91a0      	str	r1, [sp, #640]	; 0x280
 8003bd4:	f10d 0804 	add.w	r8, sp, #4
 8003bd8:	49b1      	ldr	r1, [pc, #708]	; (8003ea0 <__ssvfiscanf_r+0x2e0>)
 8003bda:	4fb2      	ldr	r7, [pc, #712]	; (8003ea4 <__ssvfiscanf_r+0x2e4>)
 8003bdc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8003ea8 <__ssvfiscanf_r+0x2e8>
 8003be0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8003be4:	4606      	mov	r6, r0
 8003be6:	91a1      	str	r1, [sp, #644]	; 0x284
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	f892 a000 	ldrb.w	sl, [r2]
 8003bee:	f1ba 0f00 	cmp.w	sl, #0
 8003bf2:	f000 8151 	beq.w	8003e98 <__ssvfiscanf_r+0x2d8>
 8003bf6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8003bfa:	f013 0308 	ands.w	r3, r3, #8
 8003bfe:	f102 0501 	add.w	r5, r2, #1
 8003c02:	d019      	beq.n	8003c38 <__ssvfiscanf_r+0x78>
 8003c04:	6863      	ldr	r3, [r4, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	dd0f      	ble.n	8003c2a <__ssvfiscanf_r+0x6a>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	5cba      	ldrb	r2, [r7, r2]
 8003c10:	0712      	lsls	r2, r2, #28
 8003c12:	d401      	bmi.n	8003c18 <__ssvfiscanf_r+0x58>
 8003c14:	462a      	mov	r2, r5
 8003c16:	e7e8      	b.n	8003bea <__ssvfiscanf_r+0x2a>
 8003c18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003c1a:	3201      	adds	r2, #1
 8003c1c:	9245      	str	r2, [sp, #276]	; 0x114
 8003c1e:	6862      	ldr	r2, [r4, #4]
 8003c20:	3301      	adds	r3, #1
 8003c22:	3a01      	subs	r2, #1
 8003c24:	6062      	str	r2, [r4, #4]
 8003c26:	6023      	str	r3, [r4, #0]
 8003c28:	e7ec      	b.n	8003c04 <__ssvfiscanf_r+0x44>
 8003c2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	4630      	mov	r0, r6
 8003c30:	4798      	blx	r3
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d0e9      	beq.n	8003c0a <__ssvfiscanf_r+0x4a>
 8003c36:	e7ed      	b.n	8003c14 <__ssvfiscanf_r+0x54>
 8003c38:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8003c3c:	f040 8083 	bne.w	8003d46 <__ssvfiscanf_r+0x186>
 8003c40:	9341      	str	r3, [sp, #260]	; 0x104
 8003c42:	9343      	str	r3, [sp, #268]	; 0x10c
 8003c44:	7853      	ldrb	r3, [r2, #1]
 8003c46:	2b2a      	cmp	r3, #42	; 0x2a
 8003c48:	bf02      	ittt	eq
 8003c4a:	2310      	moveq	r3, #16
 8003c4c:	1c95      	addeq	r5, r2, #2
 8003c4e:	9341      	streq	r3, [sp, #260]	; 0x104
 8003c50:	220a      	movs	r2, #10
 8003c52:	46ab      	mov	fp, r5
 8003c54:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8003c58:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8003c5c:	2b09      	cmp	r3, #9
 8003c5e:	d91d      	bls.n	8003c9c <__ssvfiscanf_r+0xdc>
 8003c60:	4891      	ldr	r0, [pc, #580]	; (8003ea8 <__ssvfiscanf_r+0x2e8>)
 8003c62:	2203      	movs	r2, #3
 8003c64:	f7fc fadc 	bl	8000220 <memchr>
 8003c68:	b140      	cbz	r0, 8003c7c <__ssvfiscanf_r+0xbc>
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	eba0 0009 	sub.w	r0, r0, r9
 8003c70:	fa03 f000 	lsl.w	r0, r3, r0
 8003c74:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003c76:	4318      	orrs	r0, r3
 8003c78:	9041      	str	r0, [sp, #260]	; 0x104
 8003c7a:	465d      	mov	r5, fp
 8003c7c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c80:	2b78      	cmp	r3, #120	; 0x78
 8003c82:	d806      	bhi.n	8003c92 <__ssvfiscanf_r+0xd2>
 8003c84:	2b57      	cmp	r3, #87	; 0x57
 8003c86:	d810      	bhi.n	8003caa <__ssvfiscanf_r+0xea>
 8003c88:	2b25      	cmp	r3, #37	; 0x25
 8003c8a:	d05c      	beq.n	8003d46 <__ssvfiscanf_r+0x186>
 8003c8c:	d856      	bhi.n	8003d3c <__ssvfiscanf_r+0x17c>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d074      	beq.n	8003d7c <__ssvfiscanf_r+0x1bc>
 8003c92:	2303      	movs	r3, #3
 8003c94:	9347      	str	r3, [sp, #284]	; 0x11c
 8003c96:	230a      	movs	r3, #10
 8003c98:	9342      	str	r3, [sp, #264]	; 0x108
 8003c9a:	e081      	b.n	8003da0 <__ssvfiscanf_r+0x1e0>
 8003c9c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8003c9e:	fb02 1303 	mla	r3, r2, r3, r1
 8003ca2:	3b30      	subs	r3, #48	; 0x30
 8003ca4:	9343      	str	r3, [sp, #268]	; 0x10c
 8003ca6:	465d      	mov	r5, fp
 8003ca8:	e7d3      	b.n	8003c52 <__ssvfiscanf_r+0x92>
 8003caa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8003cae:	2a20      	cmp	r2, #32
 8003cb0:	d8ef      	bhi.n	8003c92 <__ssvfiscanf_r+0xd2>
 8003cb2:	a101      	add	r1, pc, #4	; (adr r1, 8003cb8 <__ssvfiscanf_r+0xf8>)
 8003cb4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003cb8:	08003d8b 	.word	0x08003d8b
 8003cbc:	08003c93 	.word	0x08003c93
 8003cc0:	08003c93 	.word	0x08003c93
 8003cc4:	08003de9 	.word	0x08003de9
 8003cc8:	08003c93 	.word	0x08003c93
 8003ccc:	08003c93 	.word	0x08003c93
 8003cd0:	08003c93 	.word	0x08003c93
 8003cd4:	08003c93 	.word	0x08003c93
 8003cd8:	08003c93 	.word	0x08003c93
 8003cdc:	08003c93 	.word	0x08003c93
 8003ce0:	08003c93 	.word	0x08003c93
 8003ce4:	08003dff 	.word	0x08003dff
 8003ce8:	08003dd5 	.word	0x08003dd5
 8003cec:	08003d43 	.word	0x08003d43
 8003cf0:	08003d43 	.word	0x08003d43
 8003cf4:	08003d43 	.word	0x08003d43
 8003cf8:	08003c93 	.word	0x08003c93
 8003cfc:	08003dd9 	.word	0x08003dd9
 8003d00:	08003c93 	.word	0x08003c93
 8003d04:	08003c93 	.word	0x08003c93
 8003d08:	08003c93 	.word	0x08003c93
 8003d0c:	08003c93 	.word	0x08003c93
 8003d10:	08003e0f 	.word	0x08003e0f
 8003d14:	08003de1 	.word	0x08003de1
 8003d18:	08003d83 	.word	0x08003d83
 8003d1c:	08003c93 	.word	0x08003c93
 8003d20:	08003c93 	.word	0x08003c93
 8003d24:	08003e0b 	.word	0x08003e0b
 8003d28:	08003c93 	.word	0x08003c93
 8003d2c:	08003dd5 	.word	0x08003dd5
 8003d30:	08003c93 	.word	0x08003c93
 8003d34:	08003c93 	.word	0x08003c93
 8003d38:	08003d8b 	.word	0x08003d8b
 8003d3c:	3b45      	subs	r3, #69	; 0x45
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d8a7      	bhi.n	8003c92 <__ssvfiscanf_r+0xd2>
 8003d42:	2305      	movs	r3, #5
 8003d44:	e02b      	b.n	8003d9e <__ssvfiscanf_r+0x1de>
 8003d46:	6863      	ldr	r3, [r4, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dd0d      	ble.n	8003d68 <__ssvfiscanf_r+0x1a8>
 8003d4c:	6823      	ldr	r3, [r4, #0]
 8003d4e:	781a      	ldrb	r2, [r3, #0]
 8003d50:	4552      	cmp	r2, sl
 8003d52:	f040 80a1 	bne.w	8003e98 <__ssvfiscanf_r+0x2d8>
 8003d56:	3301      	adds	r3, #1
 8003d58:	6862      	ldr	r2, [r4, #4]
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8003d5e:	3a01      	subs	r2, #1
 8003d60:	3301      	adds	r3, #1
 8003d62:	6062      	str	r2, [r4, #4]
 8003d64:	9345      	str	r3, [sp, #276]	; 0x114
 8003d66:	e755      	b.n	8003c14 <__ssvfiscanf_r+0x54>
 8003d68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003d6a:	4621      	mov	r1, r4
 8003d6c:	4630      	mov	r0, r6
 8003d6e:	4798      	blx	r3
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0eb      	beq.n	8003d4c <__ssvfiscanf_r+0x18c>
 8003d74:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f040 8084 	bne.w	8003e84 <__ssvfiscanf_r+0x2c4>
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	e086      	b.n	8003e90 <__ssvfiscanf_r+0x2d0>
 8003d82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d84:	f042 0220 	orr.w	r2, r2, #32
 8003d88:	9241      	str	r2, [sp, #260]	; 0x104
 8003d8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8003d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d90:	9241      	str	r2, [sp, #260]	; 0x104
 8003d92:	2210      	movs	r2, #16
 8003d94:	2b6f      	cmp	r3, #111	; 0x6f
 8003d96:	9242      	str	r2, [sp, #264]	; 0x108
 8003d98:	bf34      	ite	cc
 8003d9a:	2303      	movcc	r3, #3
 8003d9c:	2304      	movcs	r3, #4
 8003d9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dd41      	ble.n	8003e2a <__ssvfiscanf_r+0x26a>
 8003da6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003da8:	0659      	lsls	r1, r3, #25
 8003daa:	d404      	bmi.n	8003db6 <__ssvfiscanf_r+0x1f6>
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	781a      	ldrb	r2, [r3, #0]
 8003db0:	5cba      	ldrb	r2, [r7, r2]
 8003db2:	0712      	lsls	r2, r2, #28
 8003db4:	d440      	bmi.n	8003e38 <__ssvfiscanf_r+0x278>
 8003db6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	dc4f      	bgt.n	8003e5c <__ssvfiscanf_r+0x29c>
 8003dbc:	466b      	mov	r3, sp
 8003dbe:	4622      	mov	r2, r4
 8003dc0:	a941      	add	r1, sp, #260	; 0x104
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	f000 fa08 	bl	80041d8 <_scanf_chars>
 8003dc8:	2801      	cmp	r0, #1
 8003dca:	d065      	beq.n	8003e98 <__ssvfiscanf_r+0x2d8>
 8003dcc:	2802      	cmp	r0, #2
 8003dce:	f47f af21 	bne.w	8003c14 <__ssvfiscanf_r+0x54>
 8003dd2:	e7cf      	b.n	8003d74 <__ssvfiscanf_r+0x1b4>
 8003dd4:	220a      	movs	r2, #10
 8003dd6:	e7dd      	b.n	8003d94 <__ssvfiscanf_r+0x1d4>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9342      	str	r3, [sp, #264]	; 0x108
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e7de      	b.n	8003d9e <__ssvfiscanf_r+0x1de>
 8003de0:	2308      	movs	r3, #8
 8003de2:	9342      	str	r3, [sp, #264]	; 0x108
 8003de4:	2304      	movs	r3, #4
 8003de6:	e7da      	b.n	8003d9e <__ssvfiscanf_r+0x1de>
 8003de8:	4629      	mov	r1, r5
 8003dea:	4640      	mov	r0, r8
 8003dec:	f000 fb40 	bl	8004470 <__sccl>
 8003df0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df6:	9341      	str	r3, [sp, #260]	; 0x104
 8003df8:	4605      	mov	r5, r0
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e7cf      	b.n	8003d9e <__ssvfiscanf_r+0x1de>
 8003dfe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8003e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e04:	9341      	str	r3, [sp, #260]	; 0x104
 8003e06:	2300      	movs	r3, #0
 8003e08:	e7c9      	b.n	8003d9e <__ssvfiscanf_r+0x1de>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e7c7      	b.n	8003d9e <__ssvfiscanf_r+0x1de>
 8003e0e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8003e10:	06c3      	lsls	r3, r0, #27
 8003e12:	f53f aeff 	bmi.w	8003c14 <__ssvfiscanf_r+0x54>
 8003e16:	9b00      	ldr	r3, [sp, #0]
 8003e18:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003e1a:	1d19      	adds	r1, r3, #4
 8003e1c:	9100      	str	r1, [sp, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	07c0      	lsls	r0, r0, #31
 8003e22:	bf4c      	ite	mi
 8003e24:	801a      	strhmi	r2, [r3, #0]
 8003e26:	601a      	strpl	r2, [r3, #0]
 8003e28:	e6f4      	b.n	8003c14 <__ssvfiscanf_r+0x54>
 8003e2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4630      	mov	r0, r6
 8003e30:	4798      	blx	r3
 8003e32:	2800      	cmp	r0, #0
 8003e34:	d0b7      	beq.n	8003da6 <__ssvfiscanf_r+0x1e6>
 8003e36:	e79d      	b.n	8003d74 <__ssvfiscanf_r+0x1b4>
 8003e38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8003e3a:	3201      	adds	r2, #1
 8003e3c:	9245      	str	r2, [sp, #276]	; 0x114
 8003e3e:	6862      	ldr	r2, [r4, #4]
 8003e40:	3a01      	subs	r2, #1
 8003e42:	2a00      	cmp	r2, #0
 8003e44:	6062      	str	r2, [r4, #4]
 8003e46:	dd02      	ble.n	8003e4e <__ssvfiscanf_r+0x28e>
 8003e48:	3301      	adds	r3, #1
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	e7ae      	b.n	8003dac <__ssvfiscanf_r+0x1ec>
 8003e4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8003e50:	4621      	mov	r1, r4
 8003e52:	4630      	mov	r0, r6
 8003e54:	4798      	blx	r3
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d0a8      	beq.n	8003dac <__ssvfiscanf_r+0x1ec>
 8003e5a:	e78b      	b.n	8003d74 <__ssvfiscanf_r+0x1b4>
 8003e5c:	2b04      	cmp	r3, #4
 8003e5e:	dc06      	bgt.n	8003e6e <__ssvfiscanf_r+0x2ae>
 8003e60:	466b      	mov	r3, sp
 8003e62:	4622      	mov	r2, r4
 8003e64:	a941      	add	r1, sp, #260	; 0x104
 8003e66:	4630      	mov	r0, r6
 8003e68:	f000 fa0e 	bl	8004288 <_scanf_i>
 8003e6c:	e7ac      	b.n	8003dc8 <__ssvfiscanf_r+0x208>
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <__ssvfiscanf_r+0x2ec>)
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f43f aecf 	beq.w	8003c14 <__ssvfiscanf_r+0x54>
 8003e76:	466b      	mov	r3, sp
 8003e78:	4622      	mov	r2, r4
 8003e7a:	a941      	add	r1, sp, #260	; 0x104
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	f3af 8000 	nop.w
 8003e82:	e7a1      	b.n	8003dc8 <__ssvfiscanf_r+0x208>
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e8a:	bf18      	it	ne
 8003e8c:	f04f 30ff 	movne.w	r0, #4294967295
 8003e90:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8003e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e98:	9844      	ldr	r0, [sp, #272]	; 0x110
 8003e9a:	e7f9      	b.n	8003e90 <__ssvfiscanf_r+0x2d0>
 8003e9c:	08003b0d 	.word	0x08003b0d
 8003ea0:	08003b87 	.word	0x08003b87
 8003ea4:	08004aa5 	.word	0x08004aa5
 8003ea8:	08004bab 	.word	0x08004bab
 8003eac:	00000000 	.word	0x00000000

08003eb0 <_printf_common>:
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eb4:	4616      	mov	r6, r2
 8003eb6:	4699      	mov	r9, r3
 8003eb8:	688a      	ldr	r2, [r1, #8]
 8003eba:	690b      	ldr	r3, [r1, #16]
 8003ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	bfb8      	it	lt
 8003ec4:	4613      	movlt	r3, r2
 8003ec6:	6033      	str	r3, [r6, #0]
 8003ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ecc:	4607      	mov	r7, r0
 8003ece:	460c      	mov	r4, r1
 8003ed0:	b10a      	cbz	r2, 8003ed6 <_printf_common+0x26>
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	6033      	str	r3, [r6, #0]
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	0699      	lsls	r1, r3, #26
 8003eda:	bf42      	ittt	mi
 8003edc:	6833      	ldrmi	r3, [r6, #0]
 8003ede:	3302      	addmi	r3, #2
 8003ee0:	6033      	strmi	r3, [r6, #0]
 8003ee2:	6825      	ldr	r5, [r4, #0]
 8003ee4:	f015 0506 	ands.w	r5, r5, #6
 8003ee8:	d106      	bne.n	8003ef8 <_printf_common+0x48>
 8003eea:	f104 0a19 	add.w	sl, r4, #25
 8003eee:	68e3      	ldr	r3, [r4, #12]
 8003ef0:	6832      	ldr	r2, [r6, #0]
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	42ab      	cmp	r3, r5
 8003ef6:	dc26      	bgt.n	8003f46 <_printf_common+0x96>
 8003ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003efc:	1e13      	subs	r3, r2, #0
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	bf18      	it	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	0692      	lsls	r2, r2, #26
 8003f06:	d42b      	bmi.n	8003f60 <_printf_common+0xb0>
 8003f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	4638      	mov	r0, r7
 8003f10:	47c0      	blx	r8
 8003f12:	3001      	adds	r0, #1
 8003f14:	d01e      	beq.n	8003f54 <_printf_common+0xa4>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	68e5      	ldr	r5, [r4, #12]
 8003f1a:	6832      	ldr	r2, [r6, #0]
 8003f1c:	f003 0306 	and.w	r3, r3, #6
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	bf08      	it	eq
 8003f24:	1aad      	subeq	r5, r5, r2
 8003f26:	68a3      	ldr	r3, [r4, #8]
 8003f28:	6922      	ldr	r2, [r4, #16]
 8003f2a:	bf0c      	ite	eq
 8003f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f30:	2500      	movne	r5, #0
 8003f32:	4293      	cmp	r3, r2
 8003f34:	bfc4      	itt	gt
 8003f36:	1a9b      	subgt	r3, r3, r2
 8003f38:	18ed      	addgt	r5, r5, r3
 8003f3a:	2600      	movs	r6, #0
 8003f3c:	341a      	adds	r4, #26
 8003f3e:	42b5      	cmp	r5, r6
 8003f40:	d11a      	bne.n	8003f78 <_printf_common+0xc8>
 8003f42:	2000      	movs	r0, #0
 8003f44:	e008      	b.n	8003f58 <_printf_common+0xa8>
 8003f46:	2301      	movs	r3, #1
 8003f48:	4652      	mov	r2, sl
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	4638      	mov	r0, r7
 8003f4e:	47c0      	blx	r8
 8003f50:	3001      	adds	r0, #1
 8003f52:	d103      	bne.n	8003f5c <_printf_common+0xac>
 8003f54:	f04f 30ff 	mov.w	r0, #4294967295
 8003f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5c:	3501      	adds	r5, #1
 8003f5e:	e7c6      	b.n	8003eee <_printf_common+0x3e>
 8003f60:	18e1      	adds	r1, r4, r3
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	2030      	movs	r0, #48	; 0x30
 8003f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f6a:	4422      	add	r2, r4
 8003f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f74:	3302      	adds	r3, #2
 8003f76:	e7c7      	b.n	8003f08 <_printf_common+0x58>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	4622      	mov	r2, r4
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	4638      	mov	r0, r7
 8003f80:	47c0      	blx	r8
 8003f82:	3001      	adds	r0, #1
 8003f84:	d0e6      	beq.n	8003f54 <_printf_common+0xa4>
 8003f86:	3601      	adds	r6, #1
 8003f88:	e7d9      	b.n	8003f3e <_printf_common+0x8e>
	...

08003f8c <_printf_i>:
 8003f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f90:	460c      	mov	r4, r1
 8003f92:	4691      	mov	r9, r2
 8003f94:	7e27      	ldrb	r7, [r4, #24]
 8003f96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003f98:	2f78      	cmp	r7, #120	; 0x78
 8003f9a:	4680      	mov	r8, r0
 8003f9c:	469a      	mov	sl, r3
 8003f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fa2:	d807      	bhi.n	8003fb4 <_printf_i+0x28>
 8003fa4:	2f62      	cmp	r7, #98	; 0x62
 8003fa6:	d80a      	bhi.n	8003fbe <_printf_i+0x32>
 8003fa8:	2f00      	cmp	r7, #0
 8003faa:	f000 80d8 	beq.w	800415e <_printf_i+0x1d2>
 8003fae:	2f58      	cmp	r7, #88	; 0x58
 8003fb0:	f000 80a3 	beq.w	80040fa <_printf_i+0x16e>
 8003fb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fbc:	e03a      	b.n	8004034 <_printf_i+0xa8>
 8003fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fc2:	2b15      	cmp	r3, #21
 8003fc4:	d8f6      	bhi.n	8003fb4 <_printf_i+0x28>
 8003fc6:	a001      	add	r0, pc, #4	; (adr r0, 8003fcc <_printf_i+0x40>)
 8003fc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003fcc:	08004025 	.word	0x08004025
 8003fd0:	08004039 	.word	0x08004039
 8003fd4:	08003fb5 	.word	0x08003fb5
 8003fd8:	08003fb5 	.word	0x08003fb5
 8003fdc:	08003fb5 	.word	0x08003fb5
 8003fe0:	08003fb5 	.word	0x08003fb5
 8003fe4:	08004039 	.word	0x08004039
 8003fe8:	08003fb5 	.word	0x08003fb5
 8003fec:	08003fb5 	.word	0x08003fb5
 8003ff0:	08003fb5 	.word	0x08003fb5
 8003ff4:	08003fb5 	.word	0x08003fb5
 8003ff8:	08004145 	.word	0x08004145
 8003ffc:	08004069 	.word	0x08004069
 8004000:	08004127 	.word	0x08004127
 8004004:	08003fb5 	.word	0x08003fb5
 8004008:	08003fb5 	.word	0x08003fb5
 800400c:	08004167 	.word	0x08004167
 8004010:	08003fb5 	.word	0x08003fb5
 8004014:	08004069 	.word	0x08004069
 8004018:	08003fb5 	.word	0x08003fb5
 800401c:	08003fb5 	.word	0x08003fb5
 8004020:	0800412f 	.word	0x0800412f
 8004024:	680b      	ldr	r3, [r1, #0]
 8004026:	1d1a      	adds	r2, r3, #4
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	600a      	str	r2, [r1, #0]
 800402c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004034:	2301      	movs	r3, #1
 8004036:	e0a3      	b.n	8004180 <_printf_i+0x1f4>
 8004038:	6825      	ldr	r5, [r4, #0]
 800403a:	6808      	ldr	r0, [r1, #0]
 800403c:	062e      	lsls	r6, r5, #24
 800403e:	f100 0304 	add.w	r3, r0, #4
 8004042:	d50a      	bpl.n	800405a <_printf_i+0xce>
 8004044:	6805      	ldr	r5, [r0, #0]
 8004046:	600b      	str	r3, [r1, #0]
 8004048:	2d00      	cmp	r5, #0
 800404a:	da03      	bge.n	8004054 <_printf_i+0xc8>
 800404c:	232d      	movs	r3, #45	; 0x2d
 800404e:	426d      	negs	r5, r5
 8004050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004054:	485e      	ldr	r0, [pc, #376]	; (80041d0 <_printf_i+0x244>)
 8004056:	230a      	movs	r3, #10
 8004058:	e019      	b.n	800408e <_printf_i+0x102>
 800405a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800405e:	6805      	ldr	r5, [r0, #0]
 8004060:	600b      	str	r3, [r1, #0]
 8004062:	bf18      	it	ne
 8004064:	b22d      	sxthne	r5, r5
 8004066:	e7ef      	b.n	8004048 <_printf_i+0xbc>
 8004068:	680b      	ldr	r3, [r1, #0]
 800406a:	6825      	ldr	r5, [r4, #0]
 800406c:	1d18      	adds	r0, r3, #4
 800406e:	6008      	str	r0, [r1, #0]
 8004070:	0628      	lsls	r0, r5, #24
 8004072:	d501      	bpl.n	8004078 <_printf_i+0xec>
 8004074:	681d      	ldr	r5, [r3, #0]
 8004076:	e002      	b.n	800407e <_printf_i+0xf2>
 8004078:	0669      	lsls	r1, r5, #25
 800407a:	d5fb      	bpl.n	8004074 <_printf_i+0xe8>
 800407c:	881d      	ldrh	r5, [r3, #0]
 800407e:	4854      	ldr	r0, [pc, #336]	; (80041d0 <_printf_i+0x244>)
 8004080:	2f6f      	cmp	r7, #111	; 0x6f
 8004082:	bf0c      	ite	eq
 8004084:	2308      	moveq	r3, #8
 8004086:	230a      	movne	r3, #10
 8004088:	2100      	movs	r1, #0
 800408a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800408e:	6866      	ldr	r6, [r4, #4]
 8004090:	60a6      	str	r6, [r4, #8]
 8004092:	2e00      	cmp	r6, #0
 8004094:	bfa2      	ittt	ge
 8004096:	6821      	ldrge	r1, [r4, #0]
 8004098:	f021 0104 	bicge.w	r1, r1, #4
 800409c:	6021      	strge	r1, [r4, #0]
 800409e:	b90d      	cbnz	r5, 80040a4 <_printf_i+0x118>
 80040a0:	2e00      	cmp	r6, #0
 80040a2:	d04d      	beq.n	8004140 <_printf_i+0x1b4>
 80040a4:	4616      	mov	r6, r2
 80040a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80040aa:	fb03 5711 	mls	r7, r3, r1, r5
 80040ae:	5dc7      	ldrb	r7, [r0, r7]
 80040b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040b4:	462f      	mov	r7, r5
 80040b6:	42bb      	cmp	r3, r7
 80040b8:	460d      	mov	r5, r1
 80040ba:	d9f4      	bls.n	80040a6 <_printf_i+0x11a>
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d10b      	bne.n	80040d8 <_printf_i+0x14c>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	07df      	lsls	r7, r3, #31
 80040c4:	d508      	bpl.n	80040d8 <_printf_i+0x14c>
 80040c6:	6923      	ldr	r3, [r4, #16]
 80040c8:	6861      	ldr	r1, [r4, #4]
 80040ca:	4299      	cmp	r1, r3
 80040cc:	bfde      	ittt	le
 80040ce:	2330      	movle	r3, #48	; 0x30
 80040d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040d8:	1b92      	subs	r2, r2, r6
 80040da:	6122      	str	r2, [r4, #16]
 80040dc:	f8cd a000 	str.w	sl, [sp]
 80040e0:	464b      	mov	r3, r9
 80040e2:	aa03      	add	r2, sp, #12
 80040e4:	4621      	mov	r1, r4
 80040e6:	4640      	mov	r0, r8
 80040e8:	f7ff fee2 	bl	8003eb0 <_printf_common>
 80040ec:	3001      	adds	r0, #1
 80040ee:	d14c      	bne.n	800418a <_printf_i+0x1fe>
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295
 80040f4:	b004      	add	sp, #16
 80040f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fa:	4835      	ldr	r0, [pc, #212]	; (80041d0 <_printf_i+0x244>)
 80040fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	680e      	ldr	r6, [r1, #0]
 8004104:	061f      	lsls	r7, r3, #24
 8004106:	f856 5b04 	ldr.w	r5, [r6], #4
 800410a:	600e      	str	r6, [r1, #0]
 800410c:	d514      	bpl.n	8004138 <_printf_i+0x1ac>
 800410e:	07d9      	lsls	r1, r3, #31
 8004110:	bf44      	itt	mi
 8004112:	f043 0320 	orrmi.w	r3, r3, #32
 8004116:	6023      	strmi	r3, [r4, #0]
 8004118:	b91d      	cbnz	r5, 8004122 <_printf_i+0x196>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	f023 0320 	bic.w	r3, r3, #32
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	2310      	movs	r3, #16
 8004124:	e7b0      	b.n	8004088 <_printf_i+0xfc>
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	f043 0320 	orr.w	r3, r3, #32
 800412c:	6023      	str	r3, [r4, #0]
 800412e:	2378      	movs	r3, #120	; 0x78
 8004130:	4828      	ldr	r0, [pc, #160]	; (80041d4 <_printf_i+0x248>)
 8004132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004136:	e7e3      	b.n	8004100 <_printf_i+0x174>
 8004138:	065e      	lsls	r6, r3, #25
 800413a:	bf48      	it	mi
 800413c:	b2ad      	uxthmi	r5, r5
 800413e:	e7e6      	b.n	800410e <_printf_i+0x182>
 8004140:	4616      	mov	r6, r2
 8004142:	e7bb      	b.n	80040bc <_printf_i+0x130>
 8004144:	680b      	ldr	r3, [r1, #0]
 8004146:	6826      	ldr	r6, [r4, #0]
 8004148:	6960      	ldr	r0, [r4, #20]
 800414a:	1d1d      	adds	r5, r3, #4
 800414c:	600d      	str	r5, [r1, #0]
 800414e:	0635      	lsls	r5, r6, #24
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	d501      	bpl.n	8004158 <_printf_i+0x1cc>
 8004154:	6018      	str	r0, [r3, #0]
 8004156:	e002      	b.n	800415e <_printf_i+0x1d2>
 8004158:	0671      	lsls	r1, r6, #25
 800415a:	d5fb      	bpl.n	8004154 <_printf_i+0x1c8>
 800415c:	8018      	strh	r0, [r3, #0]
 800415e:	2300      	movs	r3, #0
 8004160:	6123      	str	r3, [r4, #16]
 8004162:	4616      	mov	r6, r2
 8004164:	e7ba      	b.n	80040dc <_printf_i+0x150>
 8004166:	680b      	ldr	r3, [r1, #0]
 8004168:	1d1a      	adds	r2, r3, #4
 800416a:	600a      	str	r2, [r1, #0]
 800416c:	681e      	ldr	r6, [r3, #0]
 800416e:	6862      	ldr	r2, [r4, #4]
 8004170:	2100      	movs	r1, #0
 8004172:	4630      	mov	r0, r6
 8004174:	f7fc f854 	bl	8000220 <memchr>
 8004178:	b108      	cbz	r0, 800417e <_printf_i+0x1f2>
 800417a:	1b80      	subs	r0, r0, r6
 800417c:	6060      	str	r0, [r4, #4]
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	6123      	str	r3, [r4, #16]
 8004182:	2300      	movs	r3, #0
 8004184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004188:	e7a8      	b.n	80040dc <_printf_i+0x150>
 800418a:	6923      	ldr	r3, [r4, #16]
 800418c:	4632      	mov	r2, r6
 800418e:	4649      	mov	r1, r9
 8004190:	4640      	mov	r0, r8
 8004192:	47d0      	blx	sl
 8004194:	3001      	adds	r0, #1
 8004196:	d0ab      	beq.n	80040f0 <_printf_i+0x164>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	079b      	lsls	r3, r3, #30
 800419c:	d413      	bmi.n	80041c6 <_printf_i+0x23a>
 800419e:	68e0      	ldr	r0, [r4, #12]
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	4298      	cmp	r0, r3
 80041a4:	bfb8      	it	lt
 80041a6:	4618      	movlt	r0, r3
 80041a8:	e7a4      	b.n	80040f4 <_printf_i+0x168>
 80041aa:	2301      	movs	r3, #1
 80041ac:	4632      	mov	r2, r6
 80041ae:	4649      	mov	r1, r9
 80041b0:	4640      	mov	r0, r8
 80041b2:	47d0      	blx	sl
 80041b4:	3001      	adds	r0, #1
 80041b6:	d09b      	beq.n	80040f0 <_printf_i+0x164>
 80041b8:	3501      	adds	r5, #1
 80041ba:	68e3      	ldr	r3, [r4, #12]
 80041bc:	9903      	ldr	r1, [sp, #12]
 80041be:	1a5b      	subs	r3, r3, r1
 80041c0:	42ab      	cmp	r3, r5
 80041c2:	dcf2      	bgt.n	80041aa <_printf_i+0x21e>
 80041c4:	e7eb      	b.n	800419e <_printf_i+0x212>
 80041c6:	2500      	movs	r5, #0
 80041c8:	f104 0619 	add.w	r6, r4, #25
 80041cc:	e7f5      	b.n	80041ba <_printf_i+0x22e>
 80041ce:	bf00      	nop
 80041d0:	08004bb6 	.word	0x08004bb6
 80041d4:	08004bc7 	.word	0x08004bc7

080041d8 <_scanf_chars>:
 80041d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041dc:	4615      	mov	r5, r2
 80041de:	688a      	ldr	r2, [r1, #8]
 80041e0:	4680      	mov	r8, r0
 80041e2:	460c      	mov	r4, r1
 80041e4:	b932      	cbnz	r2, 80041f4 <_scanf_chars+0x1c>
 80041e6:	698a      	ldr	r2, [r1, #24]
 80041e8:	2a00      	cmp	r2, #0
 80041ea:	bf0c      	ite	eq
 80041ec:	2201      	moveq	r2, #1
 80041ee:	f04f 32ff 	movne.w	r2, #4294967295
 80041f2:	608a      	str	r2, [r1, #8]
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004284 <_scanf_chars+0xac>
 80041fa:	06d1      	lsls	r1, r2, #27
 80041fc:	bf5f      	itttt	pl
 80041fe:	681a      	ldrpl	r2, [r3, #0]
 8004200:	1d11      	addpl	r1, r2, #4
 8004202:	6019      	strpl	r1, [r3, #0]
 8004204:	6816      	ldrpl	r6, [r2, #0]
 8004206:	2700      	movs	r7, #0
 8004208:	69a0      	ldr	r0, [r4, #24]
 800420a:	b188      	cbz	r0, 8004230 <_scanf_chars+0x58>
 800420c:	2801      	cmp	r0, #1
 800420e:	d107      	bne.n	8004220 <_scanf_chars+0x48>
 8004210:	682b      	ldr	r3, [r5, #0]
 8004212:	781a      	ldrb	r2, [r3, #0]
 8004214:	6963      	ldr	r3, [r4, #20]
 8004216:	5c9b      	ldrb	r3, [r3, r2]
 8004218:	b953      	cbnz	r3, 8004230 <_scanf_chars+0x58>
 800421a:	bb27      	cbnz	r7, 8004266 <_scanf_chars+0x8e>
 800421c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004220:	2802      	cmp	r0, #2
 8004222:	d120      	bne.n	8004266 <_scanf_chars+0x8e>
 8004224:	682b      	ldr	r3, [r5, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f813 3009 	ldrb.w	r3, [r3, r9]
 800422c:	071b      	lsls	r3, r3, #28
 800422e:	d41a      	bmi.n	8004266 <_scanf_chars+0x8e>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	06da      	lsls	r2, r3, #27
 8004234:	bf5e      	ittt	pl
 8004236:	682b      	ldrpl	r3, [r5, #0]
 8004238:	781b      	ldrbpl	r3, [r3, #0]
 800423a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800423e:	682a      	ldr	r2, [r5, #0]
 8004240:	686b      	ldr	r3, [r5, #4]
 8004242:	3201      	adds	r2, #1
 8004244:	602a      	str	r2, [r5, #0]
 8004246:	68a2      	ldr	r2, [r4, #8]
 8004248:	3b01      	subs	r3, #1
 800424a:	3a01      	subs	r2, #1
 800424c:	606b      	str	r3, [r5, #4]
 800424e:	3701      	adds	r7, #1
 8004250:	60a2      	str	r2, [r4, #8]
 8004252:	b142      	cbz	r2, 8004266 <_scanf_chars+0x8e>
 8004254:	2b00      	cmp	r3, #0
 8004256:	dcd7      	bgt.n	8004208 <_scanf_chars+0x30>
 8004258:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800425c:	4629      	mov	r1, r5
 800425e:	4640      	mov	r0, r8
 8004260:	4798      	blx	r3
 8004262:	2800      	cmp	r0, #0
 8004264:	d0d0      	beq.n	8004208 <_scanf_chars+0x30>
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	f013 0310 	ands.w	r3, r3, #16
 800426c:	d105      	bne.n	800427a <_scanf_chars+0xa2>
 800426e:	68e2      	ldr	r2, [r4, #12]
 8004270:	3201      	adds	r2, #1
 8004272:	60e2      	str	r2, [r4, #12]
 8004274:	69a2      	ldr	r2, [r4, #24]
 8004276:	b102      	cbz	r2, 800427a <_scanf_chars+0xa2>
 8004278:	7033      	strb	r3, [r6, #0]
 800427a:	6923      	ldr	r3, [r4, #16]
 800427c:	441f      	add	r7, r3
 800427e:	6127      	str	r7, [r4, #16]
 8004280:	2000      	movs	r0, #0
 8004282:	e7cb      	b.n	800421c <_scanf_chars+0x44>
 8004284:	08004aa5 	.word	0x08004aa5

08004288 <_scanf_i>:
 8004288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800428c:	4698      	mov	r8, r3
 800428e:	4b74      	ldr	r3, [pc, #464]	; (8004460 <_scanf_i+0x1d8>)
 8004290:	460c      	mov	r4, r1
 8004292:	4682      	mov	sl, r0
 8004294:	4616      	mov	r6, r2
 8004296:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800429a:	b087      	sub	sp, #28
 800429c:	ab03      	add	r3, sp, #12
 800429e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80042a2:	4b70      	ldr	r3, [pc, #448]	; (8004464 <_scanf_i+0x1dc>)
 80042a4:	69a1      	ldr	r1, [r4, #24]
 80042a6:	4a70      	ldr	r2, [pc, #448]	; (8004468 <_scanf_i+0x1e0>)
 80042a8:	2903      	cmp	r1, #3
 80042aa:	bf18      	it	ne
 80042ac:	461a      	movne	r2, r3
 80042ae:	68a3      	ldr	r3, [r4, #8]
 80042b0:	9201      	str	r2, [sp, #4]
 80042b2:	1e5a      	subs	r2, r3, #1
 80042b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80042b8:	bf88      	it	hi
 80042ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80042be:	4627      	mov	r7, r4
 80042c0:	bf82      	ittt	hi
 80042c2:	eb03 0905 	addhi.w	r9, r3, r5
 80042c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80042ca:	60a3      	strhi	r3, [r4, #8]
 80042cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80042d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80042d4:	bf98      	it	ls
 80042d6:	f04f 0900 	movls.w	r9, #0
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	463d      	mov	r5, r7
 80042de:	f04f 0b00 	mov.w	fp, #0
 80042e2:	6831      	ldr	r1, [r6, #0]
 80042e4:	ab03      	add	r3, sp, #12
 80042e6:	7809      	ldrb	r1, [r1, #0]
 80042e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80042ec:	2202      	movs	r2, #2
 80042ee:	f7fb ff97 	bl	8000220 <memchr>
 80042f2:	b328      	cbz	r0, 8004340 <_scanf_i+0xb8>
 80042f4:	f1bb 0f01 	cmp.w	fp, #1
 80042f8:	d159      	bne.n	80043ae <_scanf_i+0x126>
 80042fa:	6862      	ldr	r2, [r4, #4]
 80042fc:	b92a      	cbnz	r2, 800430a <_scanf_i+0x82>
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	2308      	movs	r3, #8
 8004302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004306:	6063      	str	r3, [r4, #4]
 8004308:	6022      	str	r2, [r4, #0]
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004310:	6022      	str	r2, [r4, #0]
 8004312:	68a2      	ldr	r2, [r4, #8]
 8004314:	1e51      	subs	r1, r2, #1
 8004316:	60a1      	str	r1, [r4, #8]
 8004318:	b192      	cbz	r2, 8004340 <_scanf_i+0xb8>
 800431a:	6832      	ldr	r2, [r6, #0]
 800431c:	1c51      	adds	r1, r2, #1
 800431e:	6031      	str	r1, [r6, #0]
 8004320:	7812      	ldrb	r2, [r2, #0]
 8004322:	f805 2b01 	strb.w	r2, [r5], #1
 8004326:	6872      	ldr	r2, [r6, #4]
 8004328:	3a01      	subs	r2, #1
 800432a:	2a00      	cmp	r2, #0
 800432c:	6072      	str	r2, [r6, #4]
 800432e:	dc07      	bgt.n	8004340 <_scanf_i+0xb8>
 8004330:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004334:	4631      	mov	r1, r6
 8004336:	4650      	mov	r0, sl
 8004338:	4790      	blx	r2
 800433a:	2800      	cmp	r0, #0
 800433c:	f040 8085 	bne.w	800444a <_scanf_i+0x1c2>
 8004340:	f10b 0b01 	add.w	fp, fp, #1
 8004344:	f1bb 0f03 	cmp.w	fp, #3
 8004348:	d1cb      	bne.n	80042e2 <_scanf_i+0x5a>
 800434a:	6863      	ldr	r3, [r4, #4]
 800434c:	b90b      	cbnz	r3, 8004352 <_scanf_i+0xca>
 800434e:	230a      	movs	r3, #10
 8004350:	6063      	str	r3, [r4, #4]
 8004352:	6863      	ldr	r3, [r4, #4]
 8004354:	4945      	ldr	r1, [pc, #276]	; (800446c <_scanf_i+0x1e4>)
 8004356:	6960      	ldr	r0, [r4, #20]
 8004358:	1ac9      	subs	r1, r1, r3
 800435a:	f000 f889 	bl	8004470 <__sccl>
 800435e:	f04f 0b00 	mov.w	fp, #0
 8004362:	68a3      	ldr	r3, [r4, #8]
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d03d      	beq.n	80043e6 <_scanf_i+0x15e>
 800436a:	6831      	ldr	r1, [r6, #0]
 800436c:	6960      	ldr	r0, [r4, #20]
 800436e:	f891 c000 	ldrb.w	ip, [r1]
 8004372:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004376:	2800      	cmp	r0, #0
 8004378:	d035      	beq.n	80043e6 <_scanf_i+0x15e>
 800437a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800437e:	d124      	bne.n	80043ca <_scanf_i+0x142>
 8004380:	0510      	lsls	r0, r2, #20
 8004382:	d522      	bpl.n	80043ca <_scanf_i+0x142>
 8004384:	f10b 0b01 	add.w	fp, fp, #1
 8004388:	f1b9 0f00 	cmp.w	r9, #0
 800438c:	d003      	beq.n	8004396 <_scanf_i+0x10e>
 800438e:	3301      	adds	r3, #1
 8004390:	f109 39ff 	add.w	r9, r9, #4294967295
 8004394:	60a3      	str	r3, [r4, #8]
 8004396:	6873      	ldr	r3, [r6, #4]
 8004398:	3b01      	subs	r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	6073      	str	r3, [r6, #4]
 800439e:	dd1b      	ble.n	80043d8 <_scanf_i+0x150>
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	6033      	str	r3, [r6, #0]
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60a3      	str	r3, [r4, #8]
 80043ac:	e7d9      	b.n	8004362 <_scanf_i+0xda>
 80043ae:	f1bb 0f02 	cmp.w	fp, #2
 80043b2:	d1ae      	bne.n	8004312 <_scanf_i+0x8a>
 80043b4:	6822      	ldr	r2, [r4, #0]
 80043b6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80043ba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80043be:	d1bf      	bne.n	8004340 <_scanf_i+0xb8>
 80043c0:	2310      	movs	r3, #16
 80043c2:	6063      	str	r3, [r4, #4]
 80043c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c8:	e7a2      	b.n	8004310 <_scanf_i+0x88>
 80043ca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80043ce:	6022      	str	r2, [r4, #0]
 80043d0:	780b      	ldrb	r3, [r1, #0]
 80043d2:	f805 3b01 	strb.w	r3, [r5], #1
 80043d6:	e7de      	b.n	8004396 <_scanf_i+0x10e>
 80043d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80043dc:	4631      	mov	r1, r6
 80043de:	4650      	mov	r0, sl
 80043e0:	4798      	blx	r3
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d0df      	beq.n	80043a6 <_scanf_i+0x11e>
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	05d9      	lsls	r1, r3, #23
 80043ea:	d50d      	bpl.n	8004408 <_scanf_i+0x180>
 80043ec:	42bd      	cmp	r5, r7
 80043ee:	d909      	bls.n	8004404 <_scanf_i+0x17c>
 80043f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80043f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043f8:	4632      	mov	r2, r6
 80043fa:	4650      	mov	r0, sl
 80043fc:	4798      	blx	r3
 80043fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8004402:	464d      	mov	r5, r9
 8004404:	42bd      	cmp	r5, r7
 8004406:	d028      	beq.n	800445a <_scanf_i+0x1d2>
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	f012 0210 	ands.w	r2, r2, #16
 800440e:	d113      	bne.n	8004438 <_scanf_i+0x1b0>
 8004410:	702a      	strb	r2, [r5, #0]
 8004412:	6863      	ldr	r3, [r4, #4]
 8004414:	9e01      	ldr	r6, [sp, #4]
 8004416:	4639      	mov	r1, r7
 8004418:	4650      	mov	r0, sl
 800441a:	47b0      	blx	r6
 800441c:	f8d8 3000 	ldr.w	r3, [r8]
 8004420:	6821      	ldr	r1, [r4, #0]
 8004422:	1d1a      	adds	r2, r3, #4
 8004424:	f8c8 2000 	str.w	r2, [r8]
 8004428:	f011 0f20 	tst.w	r1, #32
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	d00f      	beq.n	8004450 <_scanf_i+0x1c8>
 8004430:	6018      	str	r0, [r3, #0]
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	3301      	adds	r3, #1
 8004436:	60e3      	str	r3, [r4, #12]
 8004438:	1bed      	subs	r5, r5, r7
 800443a:	44ab      	add	fp, r5
 800443c:	6925      	ldr	r5, [r4, #16]
 800443e:	445d      	add	r5, fp
 8004440:	6125      	str	r5, [r4, #16]
 8004442:	2000      	movs	r0, #0
 8004444:	b007      	add	sp, #28
 8004446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800444a:	f04f 0b00 	mov.w	fp, #0
 800444e:	e7ca      	b.n	80043e6 <_scanf_i+0x15e>
 8004450:	07ca      	lsls	r2, r1, #31
 8004452:	bf4c      	ite	mi
 8004454:	8018      	strhmi	r0, [r3, #0]
 8004456:	6018      	strpl	r0, [r3, #0]
 8004458:	e7eb      	b.n	8004432 <_scanf_i+0x1aa>
 800445a:	2001      	movs	r0, #1
 800445c:	e7f2      	b.n	8004444 <_scanf_i+0x1bc>
 800445e:	bf00      	nop
 8004460:	08004a80 	.word	0x08004a80
 8004464:	080046e9 	.word	0x080046e9
 8004468:	080045ed 	.word	0x080045ed
 800446c:	08004bf1 	.word	0x08004bf1

08004470 <__sccl>:
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	780b      	ldrb	r3, [r1, #0]
 8004474:	4604      	mov	r4, r0
 8004476:	2b5e      	cmp	r3, #94	; 0x5e
 8004478:	bf0b      	itete	eq
 800447a:	784b      	ldrbeq	r3, [r1, #1]
 800447c:	1c48      	addne	r0, r1, #1
 800447e:	1c88      	addeq	r0, r1, #2
 8004480:	2200      	movne	r2, #0
 8004482:	bf08      	it	eq
 8004484:	2201      	moveq	r2, #1
 8004486:	1e61      	subs	r1, r4, #1
 8004488:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800448c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004490:	42a9      	cmp	r1, r5
 8004492:	d1fb      	bne.n	800448c <__sccl+0x1c>
 8004494:	b90b      	cbnz	r3, 800449a <__sccl+0x2a>
 8004496:	3801      	subs	r0, #1
 8004498:	bd70      	pop	{r4, r5, r6, pc}
 800449a:	f082 0101 	eor.w	r1, r2, #1
 800449e:	54e1      	strb	r1, [r4, r3]
 80044a0:	1c42      	adds	r2, r0, #1
 80044a2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80044a6:	2d2d      	cmp	r5, #45	; 0x2d
 80044a8:	f102 36ff 	add.w	r6, r2, #4294967295
 80044ac:	4610      	mov	r0, r2
 80044ae:	d006      	beq.n	80044be <__sccl+0x4e>
 80044b0:	2d5d      	cmp	r5, #93	; 0x5d
 80044b2:	d0f1      	beq.n	8004498 <__sccl+0x28>
 80044b4:	b90d      	cbnz	r5, 80044ba <__sccl+0x4a>
 80044b6:	4630      	mov	r0, r6
 80044b8:	e7ee      	b.n	8004498 <__sccl+0x28>
 80044ba:	462b      	mov	r3, r5
 80044bc:	e7ef      	b.n	800449e <__sccl+0x2e>
 80044be:	7816      	ldrb	r6, [r2, #0]
 80044c0:	2e5d      	cmp	r6, #93	; 0x5d
 80044c2:	d0fa      	beq.n	80044ba <__sccl+0x4a>
 80044c4:	42b3      	cmp	r3, r6
 80044c6:	dcf8      	bgt.n	80044ba <__sccl+0x4a>
 80044c8:	4618      	mov	r0, r3
 80044ca:	3001      	adds	r0, #1
 80044cc:	4286      	cmp	r6, r0
 80044ce:	5421      	strb	r1, [r4, r0]
 80044d0:	dcfb      	bgt.n	80044ca <__sccl+0x5a>
 80044d2:	43d8      	mvns	r0, r3
 80044d4:	4430      	add	r0, r6
 80044d6:	1c5d      	adds	r5, r3, #1
 80044d8:	42b3      	cmp	r3, r6
 80044da:	bfa8      	it	ge
 80044dc:	2000      	movge	r0, #0
 80044de:	182b      	adds	r3, r5, r0
 80044e0:	3202      	adds	r2, #2
 80044e2:	e7de      	b.n	80044a2 <__sccl+0x32>

080044e4 <_strtol_l.isra.0>:
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ea:	d001      	beq.n	80044f0 <_strtol_l.isra.0+0xc>
 80044ec:	2b24      	cmp	r3, #36	; 0x24
 80044ee:	d906      	bls.n	80044fe <_strtol_l.isra.0+0x1a>
 80044f0:	f7ff f91e 	bl	8003730 <__errno>
 80044f4:	2316      	movs	r3, #22
 80044f6:	6003      	str	r3, [r0, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044fe:	4f3a      	ldr	r7, [pc, #232]	; (80045e8 <_strtol_l.isra.0+0x104>)
 8004500:	468e      	mov	lr, r1
 8004502:	4676      	mov	r6, lr
 8004504:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004508:	5de5      	ldrb	r5, [r4, r7]
 800450a:	f015 0508 	ands.w	r5, r5, #8
 800450e:	d1f8      	bne.n	8004502 <_strtol_l.isra.0+0x1e>
 8004510:	2c2d      	cmp	r4, #45	; 0x2d
 8004512:	d134      	bne.n	800457e <_strtol_l.isra.0+0x9a>
 8004514:	f89e 4000 	ldrb.w	r4, [lr]
 8004518:	f04f 0801 	mov.w	r8, #1
 800451c:	f106 0e02 	add.w	lr, r6, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d05c      	beq.n	80045de <_strtol_l.isra.0+0xfa>
 8004524:	2b10      	cmp	r3, #16
 8004526:	d10c      	bne.n	8004542 <_strtol_l.isra.0+0x5e>
 8004528:	2c30      	cmp	r4, #48	; 0x30
 800452a:	d10a      	bne.n	8004542 <_strtol_l.isra.0+0x5e>
 800452c:	f89e 4000 	ldrb.w	r4, [lr]
 8004530:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004534:	2c58      	cmp	r4, #88	; 0x58
 8004536:	d14d      	bne.n	80045d4 <_strtol_l.isra.0+0xf0>
 8004538:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800453c:	2310      	movs	r3, #16
 800453e:	f10e 0e02 	add.w	lr, lr, #2
 8004542:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004546:	f10c 3cff 	add.w	ip, ip, #4294967295
 800454a:	2600      	movs	r6, #0
 800454c:	fbbc f9f3 	udiv	r9, ip, r3
 8004550:	4635      	mov	r5, r6
 8004552:	fb03 ca19 	mls	sl, r3, r9, ip
 8004556:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800455a:	2f09      	cmp	r7, #9
 800455c:	d818      	bhi.n	8004590 <_strtol_l.isra.0+0xac>
 800455e:	463c      	mov	r4, r7
 8004560:	42a3      	cmp	r3, r4
 8004562:	dd24      	ble.n	80045ae <_strtol_l.isra.0+0xca>
 8004564:	2e00      	cmp	r6, #0
 8004566:	db1f      	blt.n	80045a8 <_strtol_l.isra.0+0xc4>
 8004568:	45a9      	cmp	r9, r5
 800456a:	d31d      	bcc.n	80045a8 <_strtol_l.isra.0+0xc4>
 800456c:	d101      	bne.n	8004572 <_strtol_l.isra.0+0x8e>
 800456e:	45a2      	cmp	sl, r4
 8004570:	db1a      	blt.n	80045a8 <_strtol_l.isra.0+0xc4>
 8004572:	fb05 4503 	mla	r5, r5, r3, r4
 8004576:	2601      	movs	r6, #1
 8004578:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800457c:	e7eb      	b.n	8004556 <_strtol_l.isra.0+0x72>
 800457e:	2c2b      	cmp	r4, #43	; 0x2b
 8004580:	bf08      	it	eq
 8004582:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004586:	46a8      	mov	r8, r5
 8004588:	bf08      	it	eq
 800458a:	f106 0e02 	addeq.w	lr, r6, #2
 800458e:	e7c7      	b.n	8004520 <_strtol_l.isra.0+0x3c>
 8004590:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004594:	2f19      	cmp	r7, #25
 8004596:	d801      	bhi.n	800459c <_strtol_l.isra.0+0xb8>
 8004598:	3c37      	subs	r4, #55	; 0x37
 800459a:	e7e1      	b.n	8004560 <_strtol_l.isra.0+0x7c>
 800459c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80045a0:	2f19      	cmp	r7, #25
 80045a2:	d804      	bhi.n	80045ae <_strtol_l.isra.0+0xca>
 80045a4:	3c57      	subs	r4, #87	; 0x57
 80045a6:	e7db      	b.n	8004560 <_strtol_l.isra.0+0x7c>
 80045a8:	f04f 36ff 	mov.w	r6, #4294967295
 80045ac:	e7e4      	b.n	8004578 <_strtol_l.isra.0+0x94>
 80045ae:	2e00      	cmp	r6, #0
 80045b0:	da05      	bge.n	80045be <_strtol_l.isra.0+0xda>
 80045b2:	2322      	movs	r3, #34	; 0x22
 80045b4:	6003      	str	r3, [r0, #0]
 80045b6:	4665      	mov	r5, ip
 80045b8:	b942      	cbnz	r2, 80045cc <_strtol_l.isra.0+0xe8>
 80045ba:	4628      	mov	r0, r5
 80045bc:	e79d      	b.n	80044fa <_strtol_l.isra.0+0x16>
 80045be:	f1b8 0f00 	cmp.w	r8, #0
 80045c2:	d000      	beq.n	80045c6 <_strtol_l.isra.0+0xe2>
 80045c4:	426d      	negs	r5, r5
 80045c6:	2a00      	cmp	r2, #0
 80045c8:	d0f7      	beq.n	80045ba <_strtol_l.isra.0+0xd6>
 80045ca:	b10e      	cbz	r6, 80045d0 <_strtol_l.isra.0+0xec>
 80045cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80045d0:	6011      	str	r1, [r2, #0]
 80045d2:	e7f2      	b.n	80045ba <_strtol_l.isra.0+0xd6>
 80045d4:	2430      	movs	r4, #48	; 0x30
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1b3      	bne.n	8004542 <_strtol_l.isra.0+0x5e>
 80045da:	2308      	movs	r3, #8
 80045dc:	e7b1      	b.n	8004542 <_strtol_l.isra.0+0x5e>
 80045de:	2c30      	cmp	r4, #48	; 0x30
 80045e0:	d0a4      	beq.n	800452c <_strtol_l.isra.0+0x48>
 80045e2:	230a      	movs	r3, #10
 80045e4:	e7ad      	b.n	8004542 <_strtol_l.isra.0+0x5e>
 80045e6:	bf00      	nop
 80045e8:	08004aa5 	.word	0x08004aa5

080045ec <_strtol_r>:
 80045ec:	f7ff bf7a 	b.w	80044e4 <_strtol_l.isra.0>

080045f0 <_strtoul_l.isra.0>:
 80045f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045f4:	4e3b      	ldr	r6, [pc, #236]	; (80046e4 <_strtoul_l.isra.0+0xf4>)
 80045f6:	4686      	mov	lr, r0
 80045f8:	468c      	mov	ip, r1
 80045fa:	4660      	mov	r0, ip
 80045fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004600:	5da5      	ldrb	r5, [r4, r6]
 8004602:	f015 0508 	ands.w	r5, r5, #8
 8004606:	d1f8      	bne.n	80045fa <_strtoul_l.isra.0+0xa>
 8004608:	2c2d      	cmp	r4, #45	; 0x2d
 800460a:	d134      	bne.n	8004676 <_strtoul_l.isra.0+0x86>
 800460c:	f89c 4000 	ldrb.w	r4, [ip]
 8004610:	f04f 0801 	mov.w	r8, #1
 8004614:	f100 0c02 	add.w	ip, r0, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05e      	beq.n	80046da <_strtoul_l.isra.0+0xea>
 800461c:	2b10      	cmp	r3, #16
 800461e:	d10c      	bne.n	800463a <_strtoul_l.isra.0+0x4a>
 8004620:	2c30      	cmp	r4, #48	; 0x30
 8004622:	d10a      	bne.n	800463a <_strtoul_l.isra.0+0x4a>
 8004624:	f89c 0000 	ldrb.w	r0, [ip]
 8004628:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800462c:	2858      	cmp	r0, #88	; 0x58
 800462e:	d14f      	bne.n	80046d0 <_strtoul_l.isra.0+0xe0>
 8004630:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8004634:	2310      	movs	r3, #16
 8004636:	f10c 0c02 	add.w	ip, ip, #2
 800463a:	f04f 37ff 	mov.w	r7, #4294967295
 800463e:	2500      	movs	r5, #0
 8004640:	fbb7 f7f3 	udiv	r7, r7, r3
 8004644:	fb03 f907 	mul.w	r9, r3, r7
 8004648:	ea6f 0909 	mvn.w	r9, r9
 800464c:	4628      	mov	r0, r5
 800464e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8004652:	2e09      	cmp	r6, #9
 8004654:	d818      	bhi.n	8004688 <_strtoul_l.isra.0+0x98>
 8004656:	4634      	mov	r4, r6
 8004658:	42a3      	cmp	r3, r4
 800465a:	dd24      	ble.n	80046a6 <_strtoul_l.isra.0+0xb6>
 800465c:	2d00      	cmp	r5, #0
 800465e:	db1f      	blt.n	80046a0 <_strtoul_l.isra.0+0xb0>
 8004660:	4287      	cmp	r7, r0
 8004662:	d31d      	bcc.n	80046a0 <_strtoul_l.isra.0+0xb0>
 8004664:	d101      	bne.n	800466a <_strtoul_l.isra.0+0x7a>
 8004666:	45a1      	cmp	r9, r4
 8004668:	db1a      	blt.n	80046a0 <_strtoul_l.isra.0+0xb0>
 800466a:	fb00 4003 	mla	r0, r0, r3, r4
 800466e:	2501      	movs	r5, #1
 8004670:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8004674:	e7eb      	b.n	800464e <_strtoul_l.isra.0+0x5e>
 8004676:	2c2b      	cmp	r4, #43	; 0x2b
 8004678:	bf08      	it	eq
 800467a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800467e:	46a8      	mov	r8, r5
 8004680:	bf08      	it	eq
 8004682:	f100 0c02 	addeq.w	ip, r0, #2
 8004686:	e7c7      	b.n	8004618 <_strtoul_l.isra.0+0x28>
 8004688:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800468c:	2e19      	cmp	r6, #25
 800468e:	d801      	bhi.n	8004694 <_strtoul_l.isra.0+0xa4>
 8004690:	3c37      	subs	r4, #55	; 0x37
 8004692:	e7e1      	b.n	8004658 <_strtoul_l.isra.0+0x68>
 8004694:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8004698:	2e19      	cmp	r6, #25
 800469a:	d804      	bhi.n	80046a6 <_strtoul_l.isra.0+0xb6>
 800469c:	3c57      	subs	r4, #87	; 0x57
 800469e:	e7db      	b.n	8004658 <_strtoul_l.isra.0+0x68>
 80046a0:	f04f 35ff 	mov.w	r5, #4294967295
 80046a4:	e7e4      	b.n	8004670 <_strtoul_l.isra.0+0x80>
 80046a6:	2d00      	cmp	r5, #0
 80046a8:	da07      	bge.n	80046ba <_strtoul_l.isra.0+0xca>
 80046aa:	2322      	movs	r3, #34	; 0x22
 80046ac:	f8ce 3000 	str.w	r3, [lr]
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
 80046b4:	b942      	cbnz	r2, 80046c8 <_strtoul_l.isra.0+0xd8>
 80046b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ba:	f1b8 0f00 	cmp.w	r8, #0
 80046be:	d000      	beq.n	80046c2 <_strtoul_l.isra.0+0xd2>
 80046c0:	4240      	negs	r0, r0
 80046c2:	2a00      	cmp	r2, #0
 80046c4:	d0f7      	beq.n	80046b6 <_strtoul_l.isra.0+0xc6>
 80046c6:	b10d      	cbz	r5, 80046cc <_strtoul_l.isra.0+0xdc>
 80046c8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	e7f2      	b.n	80046b6 <_strtoul_l.isra.0+0xc6>
 80046d0:	2430      	movs	r4, #48	; 0x30
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1b1      	bne.n	800463a <_strtoul_l.isra.0+0x4a>
 80046d6:	2308      	movs	r3, #8
 80046d8:	e7af      	b.n	800463a <_strtoul_l.isra.0+0x4a>
 80046da:	2c30      	cmp	r4, #48	; 0x30
 80046dc:	d0a2      	beq.n	8004624 <_strtoul_l.isra.0+0x34>
 80046de:	230a      	movs	r3, #10
 80046e0:	e7ab      	b.n	800463a <_strtoul_l.isra.0+0x4a>
 80046e2:	bf00      	nop
 80046e4:	08004aa5 	.word	0x08004aa5

080046e8 <_strtoul_r>:
 80046e8:	f7ff bf82 	b.w	80045f0 <_strtoul_l.isra.0>

080046ec <__submore>:
 80046ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f0:	460c      	mov	r4, r1
 80046f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80046f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046f8:	4299      	cmp	r1, r3
 80046fa:	d11d      	bne.n	8004738 <__submore+0x4c>
 80046fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004700:	f000 f8a8 	bl	8004854 <_malloc_r>
 8004704:	b918      	cbnz	r0, 800470e <__submore+0x22>
 8004706:	f04f 30ff 	mov.w	r0, #4294967295
 800470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800470e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004712:	63a3      	str	r3, [r4, #56]	; 0x38
 8004714:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8004718:	6360      	str	r0, [r4, #52]	; 0x34
 800471a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800471e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004722:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8004726:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800472a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800472e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8004732:	6020      	str	r0, [r4, #0]
 8004734:	2000      	movs	r0, #0
 8004736:	e7e8      	b.n	800470a <__submore+0x1e>
 8004738:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800473a:	0077      	lsls	r7, r6, #1
 800473c:	463a      	mov	r2, r7
 800473e:	f000 f8e3 	bl	8004908 <_realloc_r>
 8004742:	4605      	mov	r5, r0
 8004744:	2800      	cmp	r0, #0
 8004746:	d0de      	beq.n	8004706 <__submore+0x1a>
 8004748:	eb00 0806 	add.w	r8, r0, r6
 800474c:	4601      	mov	r1, r0
 800474e:	4632      	mov	r2, r6
 8004750:	4640      	mov	r0, r8
 8004752:	f000 f807 	bl	8004764 <memcpy>
 8004756:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800475a:	f8c4 8000 	str.w	r8, [r4]
 800475e:	e7e9      	b.n	8004734 <__submore+0x48>

08004760 <__retarget_lock_acquire_recursive>:
 8004760:	4770      	bx	lr

08004762 <__retarget_lock_release_recursive>:
 8004762:	4770      	bx	lr

08004764 <memcpy>:
 8004764:	440a      	add	r2, r1
 8004766:	4291      	cmp	r1, r2
 8004768:	f100 33ff 	add.w	r3, r0, #4294967295
 800476c:	d100      	bne.n	8004770 <memcpy+0xc>
 800476e:	4770      	bx	lr
 8004770:	b510      	push	{r4, lr}
 8004772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800477a:	4291      	cmp	r1, r2
 800477c:	d1f9      	bne.n	8004772 <memcpy+0xe>
 800477e:	bd10      	pop	{r4, pc}

08004780 <memmove>:
 8004780:	4288      	cmp	r0, r1
 8004782:	b510      	push	{r4, lr}
 8004784:	eb01 0402 	add.w	r4, r1, r2
 8004788:	d902      	bls.n	8004790 <memmove+0x10>
 800478a:	4284      	cmp	r4, r0
 800478c:	4623      	mov	r3, r4
 800478e:	d807      	bhi.n	80047a0 <memmove+0x20>
 8004790:	1e43      	subs	r3, r0, #1
 8004792:	42a1      	cmp	r1, r4
 8004794:	d008      	beq.n	80047a8 <memmove+0x28>
 8004796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800479a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800479e:	e7f8      	b.n	8004792 <memmove+0x12>
 80047a0:	4402      	add	r2, r0
 80047a2:	4601      	mov	r1, r0
 80047a4:	428a      	cmp	r2, r1
 80047a6:	d100      	bne.n	80047aa <memmove+0x2a>
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80047ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80047b2:	e7f7      	b.n	80047a4 <memmove+0x24>

080047b4 <_free_r>:
 80047b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047b6:	2900      	cmp	r1, #0
 80047b8:	d048      	beq.n	800484c <_free_r+0x98>
 80047ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047be:	9001      	str	r0, [sp, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f1a1 0404 	sub.w	r4, r1, #4
 80047c6:	bfb8      	it	lt
 80047c8:	18e4      	addlt	r4, r4, r3
 80047ca:	f000 f8d3 	bl	8004974 <__malloc_lock>
 80047ce:	4a20      	ldr	r2, [pc, #128]	; (8004850 <_free_r+0x9c>)
 80047d0:	9801      	ldr	r0, [sp, #4]
 80047d2:	6813      	ldr	r3, [r2, #0]
 80047d4:	4615      	mov	r5, r2
 80047d6:	b933      	cbnz	r3, 80047e6 <_free_r+0x32>
 80047d8:	6063      	str	r3, [r4, #4]
 80047da:	6014      	str	r4, [r2, #0]
 80047dc:	b003      	add	sp, #12
 80047de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047e2:	f000 b8cd 	b.w	8004980 <__malloc_unlock>
 80047e6:	42a3      	cmp	r3, r4
 80047e8:	d90b      	bls.n	8004802 <_free_r+0x4e>
 80047ea:	6821      	ldr	r1, [r4, #0]
 80047ec:	1862      	adds	r2, r4, r1
 80047ee:	4293      	cmp	r3, r2
 80047f0:	bf04      	itt	eq
 80047f2:	681a      	ldreq	r2, [r3, #0]
 80047f4:	685b      	ldreq	r3, [r3, #4]
 80047f6:	6063      	str	r3, [r4, #4]
 80047f8:	bf04      	itt	eq
 80047fa:	1852      	addeq	r2, r2, r1
 80047fc:	6022      	streq	r2, [r4, #0]
 80047fe:	602c      	str	r4, [r5, #0]
 8004800:	e7ec      	b.n	80047dc <_free_r+0x28>
 8004802:	461a      	mov	r2, r3
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	b10b      	cbz	r3, 800480c <_free_r+0x58>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d9fa      	bls.n	8004802 <_free_r+0x4e>
 800480c:	6811      	ldr	r1, [r2, #0]
 800480e:	1855      	adds	r5, r2, r1
 8004810:	42a5      	cmp	r5, r4
 8004812:	d10b      	bne.n	800482c <_free_r+0x78>
 8004814:	6824      	ldr	r4, [r4, #0]
 8004816:	4421      	add	r1, r4
 8004818:	1854      	adds	r4, r2, r1
 800481a:	42a3      	cmp	r3, r4
 800481c:	6011      	str	r1, [r2, #0]
 800481e:	d1dd      	bne.n	80047dc <_free_r+0x28>
 8004820:	681c      	ldr	r4, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	6053      	str	r3, [r2, #4]
 8004826:	4421      	add	r1, r4
 8004828:	6011      	str	r1, [r2, #0]
 800482a:	e7d7      	b.n	80047dc <_free_r+0x28>
 800482c:	d902      	bls.n	8004834 <_free_r+0x80>
 800482e:	230c      	movs	r3, #12
 8004830:	6003      	str	r3, [r0, #0]
 8004832:	e7d3      	b.n	80047dc <_free_r+0x28>
 8004834:	6825      	ldr	r5, [r4, #0]
 8004836:	1961      	adds	r1, r4, r5
 8004838:	428b      	cmp	r3, r1
 800483a:	bf04      	itt	eq
 800483c:	6819      	ldreq	r1, [r3, #0]
 800483e:	685b      	ldreq	r3, [r3, #4]
 8004840:	6063      	str	r3, [r4, #4]
 8004842:	bf04      	itt	eq
 8004844:	1949      	addeq	r1, r1, r5
 8004846:	6021      	streq	r1, [r4, #0]
 8004848:	6054      	str	r4, [r2, #4]
 800484a:	e7c7      	b.n	80047dc <_free_r+0x28>
 800484c:	b003      	add	sp, #12
 800484e:	bd30      	pop	{r4, r5, pc}
 8004850:	200005a0 	.word	0x200005a0

08004854 <_malloc_r>:
 8004854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004856:	1ccd      	adds	r5, r1, #3
 8004858:	f025 0503 	bic.w	r5, r5, #3
 800485c:	3508      	adds	r5, #8
 800485e:	2d0c      	cmp	r5, #12
 8004860:	bf38      	it	cc
 8004862:	250c      	movcc	r5, #12
 8004864:	2d00      	cmp	r5, #0
 8004866:	4606      	mov	r6, r0
 8004868:	db01      	blt.n	800486e <_malloc_r+0x1a>
 800486a:	42a9      	cmp	r1, r5
 800486c:	d903      	bls.n	8004876 <_malloc_r+0x22>
 800486e:	230c      	movs	r3, #12
 8004870:	6033      	str	r3, [r6, #0]
 8004872:	2000      	movs	r0, #0
 8004874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004876:	f000 f87d 	bl	8004974 <__malloc_lock>
 800487a:	4921      	ldr	r1, [pc, #132]	; (8004900 <_malloc_r+0xac>)
 800487c:	680a      	ldr	r2, [r1, #0]
 800487e:	4614      	mov	r4, r2
 8004880:	b99c      	cbnz	r4, 80048aa <_malloc_r+0x56>
 8004882:	4f20      	ldr	r7, [pc, #128]	; (8004904 <_malloc_r+0xb0>)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	b923      	cbnz	r3, 8004892 <_malloc_r+0x3e>
 8004888:	4621      	mov	r1, r4
 800488a:	4630      	mov	r0, r6
 800488c:	f000 f862 	bl	8004954 <_sbrk_r>
 8004890:	6038      	str	r0, [r7, #0]
 8004892:	4629      	mov	r1, r5
 8004894:	4630      	mov	r0, r6
 8004896:	f000 f85d 	bl	8004954 <_sbrk_r>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	d123      	bne.n	80048e6 <_malloc_r+0x92>
 800489e:	230c      	movs	r3, #12
 80048a0:	6033      	str	r3, [r6, #0]
 80048a2:	4630      	mov	r0, r6
 80048a4:	f000 f86c 	bl	8004980 <__malloc_unlock>
 80048a8:	e7e3      	b.n	8004872 <_malloc_r+0x1e>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	1b5b      	subs	r3, r3, r5
 80048ae:	d417      	bmi.n	80048e0 <_malloc_r+0x8c>
 80048b0:	2b0b      	cmp	r3, #11
 80048b2:	d903      	bls.n	80048bc <_malloc_r+0x68>
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	441c      	add	r4, r3
 80048b8:	6025      	str	r5, [r4, #0]
 80048ba:	e004      	b.n	80048c6 <_malloc_r+0x72>
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	42a2      	cmp	r2, r4
 80048c0:	bf0c      	ite	eq
 80048c2:	600b      	streq	r3, [r1, #0]
 80048c4:	6053      	strne	r3, [r2, #4]
 80048c6:	4630      	mov	r0, r6
 80048c8:	f000 f85a 	bl	8004980 <__malloc_unlock>
 80048cc:	f104 000b 	add.w	r0, r4, #11
 80048d0:	1d23      	adds	r3, r4, #4
 80048d2:	f020 0007 	bic.w	r0, r0, #7
 80048d6:	1ac2      	subs	r2, r0, r3
 80048d8:	d0cc      	beq.n	8004874 <_malloc_r+0x20>
 80048da:	1a1b      	subs	r3, r3, r0
 80048dc:	50a3      	str	r3, [r4, r2]
 80048de:	e7c9      	b.n	8004874 <_malloc_r+0x20>
 80048e0:	4622      	mov	r2, r4
 80048e2:	6864      	ldr	r4, [r4, #4]
 80048e4:	e7cc      	b.n	8004880 <_malloc_r+0x2c>
 80048e6:	1cc4      	adds	r4, r0, #3
 80048e8:	f024 0403 	bic.w	r4, r4, #3
 80048ec:	42a0      	cmp	r0, r4
 80048ee:	d0e3      	beq.n	80048b8 <_malloc_r+0x64>
 80048f0:	1a21      	subs	r1, r4, r0
 80048f2:	4630      	mov	r0, r6
 80048f4:	f000 f82e 	bl	8004954 <_sbrk_r>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d1dd      	bne.n	80048b8 <_malloc_r+0x64>
 80048fc:	e7cf      	b.n	800489e <_malloc_r+0x4a>
 80048fe:	bf00      	nop
 8004900:	200005a0 	.word	0x200005a0
 8004904:	200005a4 	.word	0x200005a4

08004908 <_realloc_r>:
 8004908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490a:	4607      	mov	r7, r0
 800490c:	4614      	mov	r4, r2
 800490e:	460e      	mov	r6, r1
 8004910:	b921      	cbnz	r1, 800491c <_realloc_r+0x14>
 8004912:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004916:	4611      	mov	r1, r2
 8004918:	f7ff bf9c 	b.w	8004854 <_malloc_r>
 800491c:	b922      	cbnz	r2, 8004928 <_realloc_r+0x20>
 800491e:	f7ff ff49 	bl	80047b4 <_free_r>
 8004922:	4625      	mov	r5, r4
 8004924:	4628      	mov	r0, r5
 8004926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004928:	f000 f830 	bl	800498c <_malloc_usable_size_r>
 800492c:	42a0      	cmp	r0, r4
 800492e:	d20f      	bcs.n	8004950 <_realloc_r+0x48>
 8004930:	4621      	mov	r1, r4
 8004932:	4638      	mov	r0, r7
 8004934:	f7ff ff8e 	bl	8004854 <_malloc_r>
 8004938:	4605      	mov	r5, r0
 800493a:	2800      	cmp	r0, #0
 800493c:	d0f2      	beq.n	8004924 <_realloc_r+0x1c>
 800493e:	4631      	mov	r1, r6
 8004940:	4622      	mov	r2, r4
 8004942:	f7ff ff0f 	bl	8004764 <memcpy>
 8004946:	4631      	mov	r1, r6
 8004948:	4638      	mov	r0, r7
 800494a:	f7ff ff33 	bl	80047b4 <_free_r>
 800494e:	e7e9      	b.n	8004924 <_realloc_r+0x1c>
 8004950:	4635      	mov	r5, r6
 8004952:	e7e7      	b.n	8004924 <_realloc_r+0x1c>

08004954 <_sbrk_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4d06      	ldr	r5, [pc, #24]	; (8004970 <_sbrk_r+0x1c>)
 8004958:	2300      	movs	r3, #0
 800495a:	4604      	mov	r4, r0
 800495c:	4608      	mov	r0, r1
 800495e:	602b      	str	r3, [r5, #0]
 8004960:	f7fc fcf6 	bl	8001350 <_sbrk>
 8004964:	1c43      	adds	r3, r0, #1
 8004966:	d102      	bne.n	800496e <_sbrk_r+0x1a>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b103      	cbz	r3, 800496e <_sbrk_r+0x1a>
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	bd38      	pop	{r3, r4, r5, pc}
 8004970:	200005f0 	.word	0x200005f0

08004974 <__malloc_lock>:
 8004974:	4801      	ldr	r0, [pc, #4]	; (800497c <__malloc_lock+0x8>)
 8004976:	f7ff bef3 	b.w	8004760 <__retarget_lock_acquire_recursive>
 800497a:	bf00      	nop
 800497c:	200005f8 	.word	0x200005f8

08004980 <__malloc_unlock>:
 8004980:	4801      	ldr	r0, [pc, #4]	; (8004988 <__malloc_unlock+0x8>)
 8004982:	f7ff beee 	b.w	8004762 <__retarget_lock_release_recursive>
 8004986:	bf00      	nop
 8004988:	200005f8 	.word	0x200005f8

0800498c <_malloc_usable_size_r>:
 800498c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004990:	1f18      	subs	r0, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	bfbc      	itt	lt
 8004996:	580b      	ldrlt	r3, [r1, r0]
 8004998:	18c0      	addlt	r0, r0, r3
 800499a:	4770      	bx	lr

0800499c <_init>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	bf00      	nop
 80049a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049a2:	bc08      	pop	{r3}
 80049a4:	469e      	mov	lr, r3
 80049a6:	4770      	bx	lr

080049a8 <_fini>:
 80049a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049aa:	bf00      	nop
 80049ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ae:	bc08      	pop	{r3}
 80049b0:	469e      	mov	lr, r3
 80049b2:	4770      	bx	lr
